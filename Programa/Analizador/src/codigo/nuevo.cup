package codigo;
import java_cup.runtime.*;

action code {: 
    TablaDeSimbolos tablaGlobal = new TablaDeSimbolos("Global"); //
    TablaDeSimbolos tablaActual = tablaGlobal; //Al principio es la global

    public void hola(){
         System.out.println(tablaActual.toString());
    }
    
    //Se crea una nueva tabla de símbolos
    public TablaDeSimbolos crearTablaDeSimbolos(String nombre){
        return new TablaDeSimbolos(nombre);
    }
    
    //Le coloca a la tabla que se pase como parametro la actual como anterior, y coloca la del parámetro de entrada como actual
    public void apilarNuevaTablaDeSimbolos(TablaDeSimbolos pTablaDeSimbolos){
        //La tabla actual la coloco como la anterior de la recibida en la entrada
        pTablaDeSimbolos.setTablaAnterior(tablaActual);
        
        //Coloco la tabla de la entrada como la nueva
        tablaActual = pTablaDeSimbolos;
    }

    //Coloca la tabla anterior a la actual como la nueva tabla actual
    public void desapilarTablaDeSimbolos(){
        System.out.println("Voy a desapilar tabla: " + tablaActual.getNombre());
        TablaDeSimbolos tablaAnterior = tablaActual.getTablaAnterior();
        if(tablaAnterior != null){
            
            tablaActual = tablaAnterior; //Con esto ya no hay referencia a la primera tabla de la pila
            System.out.println("La tabla actual es ahora: " + tablaActual.getNombre());
        }else{
            System.out.println("Error: Se está intentando desapilar la tabla Global");
        }
    }

    //Añade a la tabla actual el símbolo indicado
    public void agregarSimbolo(String pTipo, String pSimbolo){
        System.out.println("Se agrega el simbolo " + pSimbolo + " a la tabla "+tablaActual.getNombre() + "con el tipo "+ pTipo);
        tablaActual.agregarSimbolo(new Simbolo(pSimbolo, pTipo));
    }
:}

parser code {:
    public static int syntaxErrors = 0;
    
    public void syntax_error(Symbol s) {
        syntaxErrors++;
        System.err.println("\n ERROR DE SINTAXIS:");
        System.err.println("   Linea: " + (s.left+1));
        System.err.println("   Token inesperado: " + s.value);
    }
    
    public void report_error(String message, Object info) {
        System.err.println("ERROR: " + message);
    }
    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        System.err.println("\nERROR FATAL: No se puede recuperar del error de sintaxis");
        throw new Exception("Error de sintaxis irrecuperable en linea " + (s.left+1));
    }

    public void sePuedeoNo(){
        int lexerErrors = codigo.Lexer.errorCount; 
        
        if (lexerErrors == 0 && syntaxErrors == 0) {
            System.out.println("La gramatica si puede ser generada");
        }
        else {
            System.out.println("La gramatica no puede ser generada");
            System.out.println("Numero de errores en el lexer: " + lexerErrors); 
            System.out.println("Numero de errores en el parser: " + syntaxErrors);
        }
    }


:};

// TERMINALES
terminal String left_parenthesis;
terminal String right_parenthesis;
terminal String left_block;
terminal String right_block;
terminal String right_bracket;
terminal String left_bracket;

terminal String plus_operator;
terminal String minus_operator;
terminal String multiplication_operator;
terminal String division_operator;
terminal String int_division_operator;
terminal String modulo_operator;
terminal String power_operator;
terminal String increment_operator;
terminal String decrement_operator;
terminal String assignment_operator;


terminal String int_keyword;
terminal String float_keyword;
terminal String bool_keyword;
terminal String char_keyword;
terminal String string_keyword;
terminal String void_keyword;
terminal String principal_keyword;
terminal String let_keyword;
terminal String input_keyword;
terminal String output_keyword;
terminal String comma_keyword;
terminal String loop_keyword;
terminal String exit_keyword;
terminal String when_keyword;
terminal String end_keyword;
terminal String for_keyword;
terminal String step_keyword;
terminal String to_keyword;
terminal String downto_keyword;
terminal String do_keyword;
terminal String return_keyword;
terminal String break_keyword;
terminal String greater_operator;
terminal String less_operator;
terminal String greater_equal_operator;
terminal String less_equal_operator;
terminal String equal_operator;
terminal String not_equal_operator;
terminal String delimiter;
terminal String or_operator;
terminal String and_operator;
terminal String not_operator;
terminal String decide_keyword;
terminal String of_keyword;
terminal String else_keyword;
terminal String int_literal;
terminal String float_literal;
terminal String bool_literal;
terminal String CHAR_LITERAL;
terminal String STRING_LITERAL;
terminal String identifier;


// NO TERMINALES
// Expresiones aritméticas
non terminal unary_negative;
non terminal postfix_expression;
non terminal arithmetic_expression;
non terminal term;
non terminal power;
non terminal factor;
non terminal arithmetic_operands;

// Expresiones lógicas y relacionales
non terminal logical_expresion_or;
non terminal logical_expresion_and;
non terminal relational_expression;

// Declaraciones y sentencias
non terminal declaration_values;
non terminal declaration;

non terminal reassignment;
non terminal array_declaration;
non terminal assign_elements_array;
non terminal array_access;
non terminal statement;
non terminal statements;
non terminal block;

// Funciones input y output
non terminal input_statement;
non terminal output_statement;

// Bucles y condicionales
non terminal loop;
non terminal loop_left;
non terminal for_loop;
non terminal for_loop_left;
non terminal loop_content;
non terminal break_statement;
non terminal decide_of;
non terminal decide_of_left;
non terminal decide_of_left_and_content;
non terminal elif_list;
non terminal elif_part;
non terminal elif_part_left;
non terminal else_part_left;
non terminal else_part;




non terminal array_literals;




// Funciones
non terminal function;
non terminal function_left;
non terminal functions;
non terminal params;
non terminal param;
non terminal params_tail;
non terminal return_statement;
non terminal function_call;
non terminal args;
non terminal args_tail;

// Programa principal
non terminal principal;
non terminal principal_left;
non terminal global_variables;
non terminal program;

// los nuevos

// Por úlitmo un orden precendencia para el cup
precedence left or_operator; // ~
precedence left and_operator; // @
precedence right not_operator; // Σ
precedence nonassoc equal_operator, not_equal_operator; //==, !=
precedence nonassoc greater_operator, less_operator, greater_equal_operator, less_equal_operator; // >, <, >=, <=
precedence left plus_operator, minus_operator; // +, -
precedence left multiplication_operator, division_operator, int_division_operator, modulo_operator; // *, /, //, %
precedence right power_operator; // ^
precedence right increment_operator, decrement_operator; // ++, --
//ESTOS LOS PODEMOS REVISAR PARA VER SI LOS UNARIOS TAMBIÉN VAN



// El start siempre después de los terminales y no terminales
start with program;


//Expresiones aritméticas
unary_negative ::= minus_operator int_literal {: System.out.println("Negativo entero"); :}
                |  minus_operator float_literal {: System.out.println("Negativo flotante"); :}
                ;

postfix_expression ::= identifier increment_operator {: System.out.println("Incremento (++)"); :}
                    |  identifier decrement_operator {: System.out.println("Decremento (--)"); :}
                    ;

arithmetic_expression ::= arithmetic_expression plus_operator term 
                          {: System.out.println("Suma (+)"); :}
                       | arithmetic_expression plus_operator error
                       {: System.err.println("Error:En la expresión aritmética después de +"); :}
                       |  arithmetic_expression minus_operator term
                          {: System.out.println("Resta (-)"); :}
                       | arithmetic_expression minus_operator error
                       {: System.err.println("Error:En la expresión aritmética después de -"); :}
                       |  term
                       ;

term ::= term multiplication_operator power
      {: System.out.println("Multiplicacion (*)"); :}
      |  term division_operator power
      {: System.out.println("Division (/)"); :}
      |  term int_division_operator power
      {: System.out.println("Division entera (//)"); :}
      |  term modulo_operator power
      {: System.out.println("Modulo (%)"); :}
      |  power
      ;

power ::= factor power_operator power
       {: System.out.println("Potencia (^)"); :}
       |  factor
       ;

factor ::= left_parenthesis logical_expresion_and right_parenthesis
        {: System.out.println("Expresion entre parentesis reconocida"); :}
        |  arithmetic_operands
        ;

arithmetic_operands ::= int_literal:n {: RESULT = n+":int"; :}
                     |  float_literal:n {: RESULT = n+":float"; :}
                     |  identifier:n {: RESULT = n+":if"; :}
                     |  unary_negative 
                     |  postfix_expression
                     |  array_access
                     |  function_call
                     |  bool_literal:n {: RESULT = n+":bool"; :}
                     |  not_operator logical_expresion_and
                     ;

// Expresiones logicas and, or y negación

logical_expresion_and ::= logical_expresion_and and_operator logical_expresion_or
            {: System.out.println("Operador logico AND (@)"); :}
            |  logical_expresion_or
            ;

logical_expresion_or ::= logical_expresion_or or_operator relational_expression
            {: System.out.println("Operador logico OR (~)"); :}
            |  relational_expression

            ;
//Expresiones relacionales. Ya no va a aceptar expresiones tipo x24 >= var > 5.6
relational_expression ::= arithmetic_expression greater_operator arithmetic_expression
            {: System.out.println("Mayor que (>) reconocido"); :}
            |  arithmetic_expression less_operator arithmetic_expression
            {: System.out.println("Menor que (<) reconocido"); :}
            |  arithmetic_expression greater_equal_operator arithmetic_expression
            {: System.out.println("Mayor o igual que (>=) reconocido"); :}
            |  arithmetic_expression less_equal_operator arithmetic_expression
            {: System.out.println("Menor o igual que (<=) reconocido"); :}
            |  arithmetic_expression equal_operator arithmetic_expression
            {: System.out.println("Igual que (==) reconocido"); :}
            |  arithmetic_expression not_equal_operator arithmetic_expression
            {: System.out.println("Diferente que (!=) reconocido"); :}
	    | arithmetic_expression {: System.out.println("Expresión aritmética"); :}
            ;

//Declaraciones// Char y string es agregado para una prueba
declaration_values ::= logical_expresion_and | CHAR_LITERAL | STRING_LITERAL;


             
declaration ::= let_keyword int_keyword identifier:id delimiter
             {: System.out.println("Declaracion: int sin valor con id "+ id); agregarSimbolo("int", id);:}
             |  let_keyword float_keyword identifier:id delimiter
             {: System.out.println("Declaracion: float sin valor con id " + id); agregarSimbolo("float", id); :}
             |  let_keyword bool_keyword identifier:id delimiter
             {: System.out.println("Declaracion: bool sin valor con id " + id); agregarSimbolo("bool", id); :}
             |  let_keyword char_keyword identifier:id delimiter
             {: System.out.println("Declaracion: char sin valor con id " + id); agregarSimbolo("char", id); :}
             |  let_keyword string_keyword identifier:id delimiter
             {: System.out.println("Declaracion: string sin valor con id "+ id); agregarSimbolo("string", id); :}
             |  let_keyword int_keyword identifier:id assignment_operator declaration_values delimiter
             {: System.out.println("Declaracion: int con valor con el id "+ id); agregarSimbolo("int", id);:}
             |  let_keyword float_keyword identifier:id assignment_operator declaration_values delimiter
             {: System.out.println("Declaracion: float con valor con el id "+ id); agregarSimbolo("float", id); :}
             |  let_keyword bool_keyword identifier:id assignment_operator declaration_values delimiter
             {: System.out.println("Declaracion: bool con valor con el id " + id); agregarSimbolo("bool", id); :}
             |  let_keyword char_keyword identifier:id assignment_operator declaration_values delimiter
             {: System.out.println("Declaracion: char con valor con el id " + id); agregarSimbolo("char", id); :}
             |  let_keyword string_keyword identifier:id assignment_operator declaration_values delimiter
             {: System.out.println("Declaracion: string con valor con el id " + id); agregarSimbolo("string", id); :}
             | error delimiter
             {:
               System.err.println("DECLARACION con error"); :}
             | let_keyword error identifier delimiter
             {: System.err.println("No declaro el tipo error"); :}
             | let_keyword int_keyword error delimiter
             {: System.err.println("No declaro el id error"); :}
             | let_keyword float_keyword error delimiter
             {: System.err.println("No declaro el id error"); :}
             | let_keyword bool_keyword error delimiter
             {: System.err.println("No declaro el id error"); :}
            | let_keyword char_keyword error delimiter
            {: System.err.println("No declaro el id error"); :}
            | let_keyword string_keyword error delimiter
            {: System.err.println("No declaro el id error"); :}

            
            | let_keyword int_keyword identifier error 
            {: System.err.println("Error falta el delimitador"); :} 
            | let_keyword float_keyword identifier error
            {: System.err.println("Error falta el delimitador"); :}
            | let_keyword bool_keyword identifier error
            {: System.err.println("Error falta el delimitador"); :}
            | let_keyword int_keyword identifier assignment_operator declaration_values error
            {: System.err.println("Error falta el delimitador"); :}
            | let_keyword float_keyword identifier assignment_operator declaration_values error
            {: System.err.println("Error falta el delimitador"); :}
            | let_keyword bool_keyword identifier assignment_operator declaration_values error
            {: System.err.println("Error falta el delimitador"); :}
            | let_keyword char_keyword identifier assignment_operator declaration_values error
            {: System.err.println("Error falta el delimitador"); :}
            | let_keyword string_keyword identifier assignment_operator declaration_values error
            {: System.err.println("Error falta el delimitador"); :}

            | let_keyword error identifier assignment_operator declaration_values delimiter
            {: System.err.println("Error falta el tipo"); :}

             | error int_keyword identifier delimiter 
             {: System.err.println("Error falta el let"); :}
             | error float_keyword identifier delimiter 
             {: System.err.println("Error falta el let"); :}
             | error bool_keyword identifier delimiter 
             {: System.err.println("Error falta el let"); :}
             | error char_keyword identifier delimiter 
             {: System.err.println("Error falta el let"); :}
             | error string_keyword identifier delimiter 
             {: System.err.println("Error falta el let"); :}

             
             //|int_keyword identifier assignment_operator declaration_values delimiter
             //{: System.err.println("Error falta el let"); :}
             //|float_keyword identifier assignment_operator declaration_values delimiter
             //{: System.err.println("Error falta el let"); :}
             //|bool_keyword identifier assignment_operator declaration_values delimiter
             //{: System.err.println("Error falta el let"); :}
             //|char_keyword identifier assignment_operator declaration_values delimiter
             //{: System.err.println("Error falta el let"); :}
             //|string_keyword identifier assignment_operator declaration_values delimiter
             //{: System.err.println("Error falta el let"); :}
             
            | let_keyword int_keyword identifier assignment_operator error delimiter
            {: System.err.println("Error en inicializacion de int"); :}
            | let_keyword float_keyword identifier assignment_operator error delimiter
            {: System.err.println("Error en inicializacion de float"); :}
            | let_keyword bool_keyword identifier assignment_operator error delimiter
            {: System.err.println("Error en inicializacion de bool"); :}
            | let_keyword char_keyword identifier assignment_operator error delimiter
            {: System.err.println("Error en inicializacion de char"); :}
            | let_keyword string_keyword identifier assignment_operator error delimiter
            {: System.err.println("Error en inicializacion de string"); :}

             ;


//Reasignación
reassignment ::= identifier assignment_operator declaration_values delimiter
            {: System.out.println("Reasignación"); :}
            | identifier assignment_operator error delimiter
            {: System.err.println("Reasignación con error, declare un valor"); :}
            | error assignment_operator declaration_values delimiter
            {: System.err.println("Reasignación con error, declare un id"); :}
            | identifier assignment_operator declaration_values error
            {: System.err.println("Reasignación con error, falta el delimitador"); :}
    ;


// Array
array_declaration ::= let_keyword int_keyword identifier left_bracket int_literal right_bracket delimiter
                {: System.out.println("Declaracion: array int sin nada"); :}
                | let_keyword int_keyword identifier error delimiter
                {: System.err.println("Error en declaracion de array"); :}
                | error int_keyword identifier left_bracket int_literal right_bracket delimiter
                {: System.err.println("Error en declaracion de array, falta let"); :}
                | let_keyword error identifier left_bracket int_literal right_bracket delimiter
                {: System.err.println("Error en declaracion de array, falta tipo"); :}
                | let_keyword int_keyword error left_bracket int_literal right_bracket delimiter
                {: System.err.println("Error en declaracion de array, falta id"); :}
                | let_keyword int_keyword identifier left_bracket error right_bracket delimiter
                {: System.err.println("Error en declaracion de array, falta tamaño"); :}
                | let_keyword int_keyword identifier left_bracket int_literal error delimiter
                {: System.err.println("Error en declaracion de array, falta ]"); :}
                | let_keyword int_keyword identifier error int_literal right_bracket delimiter
                {: System.err.println("Error en declaracion de array, falta ["); :}
                | let_keyword int_keyword identifier left_bracket int_literal right_bracket error
                {: System.err.println("Error en declaracion de array, falta delimitador"); :}




                |  let_keyword char_keyword identifier left_bracket int_literal right_bracket delimiter
                {: System.out.println("Declaracion: array char sin nada"); :}
                | error char_keyword identifier left_bracket int_literal right_bracket delimiter
                {: System.err.println("Error en declaracion de array, falta let"); :}
                | let_keyword char_keyword error left_bracket int_literal right_bracket delimiter
                {: System.err.println("Error en declaracion de array, falta id"); :}
                | let_keyword char_keyword identifier left_bracket error right_bracket delimiter
                {: System.err.println("Error en declaracion de array, falta tamaño"); :}
                | let_keyword char_keyword identifier left_bracket int_literal error delimiter
                {: System.err.println("Error en declaracion de array, falta ]"); :}
                | let_keyword char_keyword identifier error int_literal right_bracket delimiter
                {: System.err.println("Error en declaracion de array, falta ["); :}
                | let_keyword char_keyword identifier left_bracket int_literal right_bracket error
                {: System.err.println("Error en declaracion de array, falta delimitador"); :}
                | let_keyword char_keyword identifier error delimiter
                {: System.err.println("Error en declaracion de array"); :}

                |  let_keyword int_keyword identifier left_bracket int_literal right_bracket assignment_operator left_block array_literals right_block delimiter
                {: System.out.println("Declaracion: array int con valores"); :}
                | error int_keyword identifier left_bracket int_literal right_bracket assignment_operator left_block array_literals right_block delimiter
                {: System.err.println("Error en declaracion de array, falta let"); :}
                | let_keyword error identifier left_bracket int_literal right_bracket assignment_operator left_block array_literals right_block delimiter
                {: System.err.println("Error en declaracion de array, falta tipo"); :}
                | let_keyword int_keyword error left_bracket int_literal right_bracket assignment_operator left_block array_literals right_block delimiter
                {: System.err.println("Error en declaracion de array, falta id"); :}
                | let_keyword int_keyword identifier left_bracket error right_bracket assignment_operator left_block array_literals right_block delimiter
                {: System.err.println("Error en declaracion de array, falta tamaño"); :}
                | let_keyword int_keyword identifier left_bracket int_literal error assignment_operator left_block array_literals right_block delimiter
                {: System.err.println("Error en declaracion de array, falta ]"); :}
                | let_keyword int_keyword identifier error int_literal right_bracket assignment_operator left_block array_literals right_block delimiter
                {: System.err.println("Error en declaracion de array, falta ["); :}
                | let_keyword int_keyword identifier left_bracket int_literal right_bracket assignment_operator left_block array_literals right_block error
                {: System.err.println("Error en declaracion de array, falta delimitador"); :}
    
                | let_keyword int_keyword identifier left_bracket int_literal right_bracket assignment_operator left_block error right_block delimiter
                {: System.err.println("Error en inicializacion de array"); :}

                |  let_keyword char_keyword identifier left_bracket int_literal right_bracket assignment_operator left_block array_literals right_block delimiter
                {: System.out.println("Declaracion: arreglo char con valores"); :}
                | error char_keyword identifier left_bracket int_literal right_bracket assignment_operator left_block array_literals right_block delimiter
                {: System.err.println("Error en declaracion de array, falta let"); :}
                | let_keyword char_keyword error left_bracket int_literal right_bracket assignment_operator left_block array_literals right_block delimiter
                {: System.err.println("Error en declaracion de array, falta id"); :}
                | let_keyword char_keyword identifier left_bracket error right_bracket assignment_operator left_block array_literals right_block delimiter
                {: System.err.println("Error en declaracion de array, falta tamaño"); :}
                | let_keyword char_keyword identifier left_bracket int_literal error assignment_operator left_block array_literals right_block delimiter
                {: System.err.println("Error en declaracion de array, falta ]"); :}
                | let_keyword char_keyword identifier error int_literal right_bracket assignment_operator left_block array_literals right_block delimiter
                {: System.err.println("Error en declaracion de array, falta ["); :}

                | let_keyword char_keyword identifier left_bracket int_literal right_bracket assignment_operator left_block error right_block delimiter
                {: System.err.println("Error en inicializacion de array"); :}

                ;

array_literals ::= int_literal
                 |  CHAR_LITERAL
                 |  identifier
                 |  array_literals comma_keyword int_literal
                 |  array_literals comma_keyword CHAR_LITERAL
                 |  array_literals comma_keyword identifier
                 ;

assign_elements_array ::= identifier left_bracket arithmetic_expression right_bracket assignment_operator arithmetic_expression delimiter
                {: System.out.println("Asignacion a elemento de arreglo"); :}

                |  identifier left_bracket arithmetic_expression right_bracket assignment_operator CHAR_LITERAL delimiter
                {: System.out.println("Asignacion a elemento de arreglo"); :}
                ;

//Ya puede acceder a posiciones del arreglo con expresiones aritmeticas
array_access ::= identifier left_bracket arithmetic_expression right_bracket; 


// input y output
input_statement ::= input_keyword identifier delimiter
                 {: System.out.println("Input reconocido"); :}
                 |  input_keyword error delimiter
                 {: System.err.println("Error en input"); :}
                 | error input_keyword identifier delimiter
                 {: System.err.println("No se declaro el input"); :}
                 | input_keyword identifier error
                 {: System.err.println("Error falta el delimitador en input"); :}
                 ;


output_statement ::= output_keyword identifier delimiter
                {: System.out.println("Output id"); :}
                  |  output_keyword int_literal delimiter
                    {: System.out.println("Output entero"); :}
                  |  output_keyword float_literal delimiter
                    {: System.out.println("Output float"); :}
                  |  output_keyword bool_literal delimiter
                    {: System.out.println("Output booleano"); :}
                  |  output_keyword CHAR_LITERAL delimiter
                    {: System.out.println("Output char"); :}
                  |  output_keyword STRING_LITERAL delimiter
                    {: System.out.println("Output string"); :}
                  | output_keyword error delimiter
                  {: System.err.println("Error en output"); :}
                  ;

//Decide of. Ya están separadas ambas  keywords
decide_of_left ::= 
                decide_keyword of_keyword left_parenthesis logical_expresion_and right_parenthesis minus_operator greater_operator
                    {: 
                        //Crear la tabla de símbolos
                        TablaDeSimbolos t = crearTablaDeSimbolos("decide of"); //Crear la nueva tabla para el decide of
                        apilarNuevaTablaDeSimbolos(t); //Se coloca esta tabla como la actual y la que estaba en esa variable como la anterior de esta
                    :};

decide_of_left_and_content ::= 
                            decide_of_left left_block loop_content right_block 
                                {: 
                                    desapilarTablaDeSimbolos(); //Desapilo aquí que ya se habría analizado ese bloque
                                :}
                            ;
                            

decide_of ::= decide_of_left_and_content end_keyword decide_keyword delimiter
              {: System.out.println("decide of normal");  :}
           |  decide_of_left_and_content elif_list end_keyword decide_keyword delimiter
           {: System.out.println("decide of con varias condiciones"); ;:}
           |  decide_of_left_and_content else_part end_keyword decide_keyword delimiter
              {: System.out.println("decide of con else"); :}          
           |  decide_of_left_and_content elif_list else_part end_keyword decide_keyword delimiter
              {: System.out.println("decide of con varias condiciones y else"); :}
            | decide_keyword of_keyword left_parenthesis error right_parenthesis minus_operator greater_operator left_block loop_content right_block end_keyword decide_keyword delimiter
           {: System.err.println("Error en condicion de decide of"); :}
           ;

elif_list ::= elif_part
           |  elif_list elif_part
           ;

elif_part_left ::= left_parenthesis logical_expresion_and right_parenthesis minus_operator greater_operator
                    {:
                        //Crear la tabla de símbolos
                        TablaDeSimbolos t = crearTablaDeSimbolos("elif"); //Crear la nueva tabla para el decide of
                        apilarNuevaTablaDeSimbolos(t); //Se coloca esta tabla como la actual y la que estaba en esa variable como la anterior de esta
                    :}
                ;

elif_part ::= elif_part_left left_block loop_content right_block 
           {: System.out.println("elif"); 
                desapilarTablaDeSimbolos();
            :};
            

else_part_left ::= else_keyword minus_operator greater_operator
                    {:
                        //Crear la tabla de símbolos
                        TablaDeSimbolos t = crearTablaDeSimbolos("else"); //Crear la nueva tabla para el decide of
                        apilarNuevaTablaDeSimbolos(t); //Se coloca esta tabla como la actual y la que estaba en esa variable como la anterior de esta
                    :}
                    ;
else_part ::= else_part_left left_block loop_content right_block
           {: System.out.println("else"); desapilarTablaDeSimbolos();:}
;

//Loop
loop_left ::= loop_keyword 
            {: 
             //Crear la tabla de símbolos
                TablaDeSimbolos t = crearTablaDeSimbolos("loop"); 
                apilarNuevaTablaDeSimbolos(t); 
            :};
loop ::= loop_left loop_content exit_keyword when_keyword logical_expresion_and delimiter end_keyword loop_keyword delimiter
      {: System.out.println("Loop");  desapilarTablaDeSimbolos();:}
      | loop_left error exit_keyword when_keyword loop_keyword delimiter
      {: System.err.println("Error en contenido de loop");  desapilarTablaDeSimbolos();:};

loop_content ::= statement
              |  break_statement
              |  loop_content statement
              |  loop_content break_statement
              ;

break_statement ::= break_keyword delimiter
                 {: System.out.println("break"); :}
;

//For
for_loop_left ::= 
        for_keyword reassignment step_keyword int_literal to_keyword int_literal do_keyword 
        {: System.out.println("for loop int to"); 
            //Crear la tabla de símbolos
            TablaDeSimbolos t = crearTablaDeSimbolos("for"); 
            apilarNuevaTablaDeSimbolos(t); 
        :}
          |  for_keyword reassignment step_keyword int_literal downto_keyword int_literal do_keyword 
        {: System.out.println("for loop int downto"); 
            //Crear la tabla de símbolos
            TablaDeSimbolos t = crearTablaDeSimbolos("for"); 
            apilarNuevaTablaDeSimbolos(t); 
        :}
          |  for_keyword reassignment step_keyword float_literal to_keyword float_literal do_keyword 
        {: System.out.println("for loop float to"); 
            //Crear la tabla de símbolos
                TablaDeSimbolos t = crearTablaDeSimbolos("for"); 
                apilarNuevaTablaDeSimbolos(t); 
        :}
          |  for_keyword reassignment step_keyword float_literal downto_keyword float_literal do_keyword 
        {: System.out.println("for loop float downto"); 
            //Crear la tabla de símbolos
                TablaDeSimbolos t = crearTablaDeSimbolos("for"); 
                apilarNuevaTablaDeSimbolos(t); 
        :}  
        ;


for_loop ::= for_loop_left left_block loop_content right_block
        {: System.out.println("fin for"); desapilarTablaDeSimbolos();:}
        ;

//Funciones

//Esta parte es para poder tomar el identificador y ejecutar el código que va a crear la tabla de símbolos de esta parte
function_left ::=  
           // Solo para enteros 
            int_keyword identifier:id
                {: 
                    System.out.println("Crear tabla de símbolos para función int: " +id); 
                    TablaDeSimbolos t = crearTablaDeSimbolos(id); //Crear la nueva tabla
                    apilarNuevaTablaDeSimbolos(t); //Se coloca esta tabla como la actual y la que estaba en esa variable como la anterior de esta
                :}
            |  float_keyword identifier:id
                {: System.out.println("Crear tabla de símbolos para función flotante: " +id); 
                    TablaDeSimbolos t = crearTablaDeSimbolos(id); //Crear la nueva tabla
                    apilarNuevaTablaDeSimbolos(t); //Se coloca esta tabla como la actual y la que estaba en esa variable como la anterior de esta
                :}
            |  bool_keyword identifier:id
                {: System.out.println("Crear tabla de símbolos para función bool: " +id); 
                    TablaDeSimbolos t = crearTablaDeSimbolos(id); //Crear la nueva tabla
                    apilarNuevaTablaDeSimbolos(t); //Se coloca esta tabla como la actual y la que estaba en esa variable como la anterior de esta
                :}
            |  char_keyword identifier:id
                {: System.out.println("Crear tabla de símbolos para función char: " +id); 
                    TablaDeSimbolos t = crearTablaDeSimbolos(id); //Crear la nueva tabla
                    apilarNuevaTablaDeSimbolos(t); //Se coloca esta tabla como la actual y la que estaba en esa variable como la anterior de esta
                :}
            |  string_keyword identifier:id
                {: System.out.println("Crear tabla de símbolos para función string: " +id); 
                    TablaDeSimbolos t = crearTablaDeSimbolos(id); //Crear la nueva tabla
                    apilarNuevaTablaDeSimbolos(t); //Se coloca esta tabla como la actual y la que estaba en esa variable como la anterior de esta
                :}
            ;

function ::= 
          // Solo para enteros 
          function_left left_parenthesis right_parenthesis block
            {: 
                //Aquí desapilo
                desapilarTablaDeSimbolos();
                
             :}
          |  function_left left_parenthesis params right_parenthesis block
            {: 
                desapilarTablaDeSimbolos();
             :}
          |  function_left left_parenthesis error right_parenthesis block
          {: System.err.println("ERROR en parámetros de función "); :}
          ;




params ::= param params_tail;

params_tail ::= /* empty */
             |  comma_keyword param params_tail
             ;

param ::= int_keyword identifier
       |  float_keyword identifier
       |  bool_keyword identifier
       |  char_keyword identifier
       |  string_keyword identifier
       ;

return_statement ::= return_keyword delimiter
                  {: System.out.println("return vacio"); :}
                  |  return_keyword logical_expresion_and delimiter
                  {: System.out.println("return expresion logica"); :}
                  ;

function_call ::= identifier left_parenthesis right_parenthesis
               {: System.out.println("Llamada a funcion sin argumentos"); :}
               |  identifier left_parenthesis args right_parenthesis
               {: System.out.println("Llamada a funcion con argumentos"); :}
               ;

args ::= int_literal args_tail
      |  float_literal args_tail
      |  identifier args_tail
      |  array_access args_tail
      |  STRING_LITERAL args_tail
      |  CHAR_LITERAL args_tail
      ;

args_tail ::= /* empty */
           |  comma_keyword int_literal args_tail
           |  comma_keyword float_literal args_tail
           |  comma_keyword identifier args_tail
           |  comma_keyword array_access args_tail
           | comma_keyword  STRING_LITERAL args_tail
           | comma_keyword CHAR_LITERAL args_tail
           ;

//Bloques de código y statemets
block ::= left_block statements right_block
        {: System.out.println("bloque con statement"); :}
       |  left_block right_block
         {: System.out.println("bloque vacio"); :}
       |  left_block error right_block
       {: System.err.println("bloque con error"); :}
       ;

statements ::= statement
            |  statements statement
            ;

statement ::= declaration
           |  reassignment
           |  array_declaration
           |  assign_elements_array
           |  input_statement
           |  output_statement
           |  decide_of
           |  loop
           |  for_loop
           |  return_statement
           ;

// Variables globales
global_variables ::= /* empty */
                  |  global_variables declaration {: hola(); //Puedo hacer que si no hay tabla ya creada la haga. Sino no hace nada  :}
                  ;

//Programa principal
principal_left ::= void_keyword principal_keyword left_parenthesis right_parenthesis 
                    {: //Para poder crear la tabla de símbolos
                        TablaDeSimbolos t = crearTablaDeSimbolos("Principal"); //Crear la nueva tabla
                        apilarNuevaTablaDeSimbolos(t); //Se coloca esta tabla como la actual y la que estaba en esa variable como la anterior de esta
                     :} 
                     ;
principal ::= principal_left block
           {: System.out.println("\n>> FUNCION PRINCIPAL reconocida"); desapilarTablaDeSimbolos(); :}
           ;

//Funciones agrupadas
functions ::= /* empty */
           |  functions function
           ;


//Símbolo inicial. Ya se inicia con funciones y luego la principal
program ::= global_variables  functions principal
         {: System.out.println("\n========== PROGRAMA COMPLETO VALIDADO ==========\n"); 
         parser.sePuedeoNo();
         System.out.println("\nEsto está al final de la producción program");
         :};