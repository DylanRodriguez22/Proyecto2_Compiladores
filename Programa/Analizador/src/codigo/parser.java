
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\331\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\003\004\000\002\003\004\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\003\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\003\000\002\006" +
    "\005\000\002\006\003\000\002\007\005\000\002\007\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\004\000\002\012" +
    "\005\000\002\012\003\000\002\011\005\000\002\011\003" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\015\006\000\002\015\006\000\002\015\006" +
    "\000\002\015\006\000\002\015\006\000\002\015\010\000" +
    "\002\015\010\000\002\015\010\000\002\015\010\000\002" +
    "\015\010\000\002\015\004\000\002\015\006\000\002\015" +
    "\006\000\002\015\006\000\002\015\006\000\002\015\006" +
    "\000\002\015\006\000\002\015\006\000\002\015\006\000" +
    "\002\015\006\000\002\015\010\000\002\015\010\000\002" +
    "\015\010\000\002\015\010\000\002\015\010\000\002\015" +
    "\010\000\002\015\006\000\002\015\006\000\002\015\006" +
    "\000\002\015\006\000\002\015\006\000\002\015\010\000" +
    "\002\015\010\000\002\015\010\000\002\015\010\000\002" +
    "\015\010\000\002\016\006\000\002\016\006\000\002\016" +
    "\006\000\002\016\006\000\002\017\011\000\002\017\007" +
    "\000\002\017\011\000\002\017\011\000\002\017\011\000" +
    "\002\017\011\000\002\017\011\000\002\017\011\000\002" +
    "\017\011\000\002\017\011\000\002\017\011\000\002\017" +
    "\011\000\002\017\011\000\002\017\011\000\002\017\011" +
    "\000\002\017\011\000\002\017\007\000\002\017\015\000" +
    "\002\017\015\000\002\017\015\000\002\017\015\000\002" +
    "\017\015\000\002\017\015\000\002\017\015\000\002\017" +
    "\015\000\002\017\015\000\002\017\015\000\002\017\015" +
    "\000\002\017\015\000\002\017\015\000\002\017\015\000" +
    "\002\017\015\000\002\017\015\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\020\011\000\002\020\011" +
    "\000\002\021\006\000\002\025\005\000\002\025\005\000" +
    "\002\025\006\000\002\025\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\033\013" +
    "\000\002\033\014\000\002\033\014\000\002\033\015\000" +
    "\002\033\013\000\002\034\003\000\002\034\004\000\002" +
    "\035\007\000\002\036\004\000\002\027\013\000\002\027" +
    "\010\000\002\031\003\000\002\031\003\000\002\031\004" +
    "\000\002\031\004\000\002\032\004\000\002\030\014\000" +
    "\002\030\014\000\002\030\014\000\002\030\014\000\002" +
    "\030\010\000\002\040\007\000\002\040\010\000\002\040" +
    "\010\000\002\040\007\000\002\040\010\000\002\040\010" +
    "\000\002\040\007\000\002\040\010\000\002\040\010\000" +
    "\002\040\007\000\002\040\010\000\002\040\010\000\002" +
    "\040\007\000\002\040\010\000\002\040\010\000\002\042" +
    "\004\000\002\044\002\000\002\044\005\000\002\043\004" +
    "\000\002\043\004\000\002\043\004\000\002\043\004\000" +
    "\002\043\004\000\002\045\004\000\002\045\005\000\002" +
    "\046\005\000\002\046\006\000\002\047\004\000\002\047" +
    "\004\000\002\047\004\000\002\047\004\000\002\047\004" +
    "\000\002\047\004\000\002\050\002\000\002\050\005\000" +
    "\002\050\005\000\002\050\005\000\002\050\005\000\002" +
    "\050\005\000\002\050\005\000\002\024\005\000\002\024" +
    "\004\000\002\024\005\000\002\023\003\000\002\023\004" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\052\002\000\002\052\004\000\002\051\007" +
    "\000\002\041\002\000\002\041\004\000\002\053\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0226\000\022\003\uff2e\022\uff2e\023\uff2e\024\uff2e\025" +
    "\uff2e\026\uff2e\027\uff2e\031\uff2e\001\002\000\022\003\007" +
    "\022\uff2b\023\uff2b\024\uff2b\025\uff2b\026\uff2b\027\uff2b\031" +
    "\012\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\016\022\u0143\023\336\024\342\025\u0141\026" +
    "\337\056\335\001\002\000\016\022\256\023\251\024\254" +
    "\025\253\026\250\027\252\001\002\000\022\003\uff2d\022" +
    "\uff2d\023\uff2d\024\uff2d\025\uff2d\026\uff2d\027\uff2d\031\uff2d" +
    "\001\002\000\016\003\015\022\020\023\013\024\017\025" +
    "\016\026\014\001\002\000\006\003\234\073\235\001\002" +
    "\000\006\003\222\073\223\001\002\000\004\073\215\001" +
    "\002\000\006\003\204\073\203\001\002\000\006\003\171" +
    "\073\170\001\002\000\006\003\022\073\021\001\002\000" +
    "\010\003\026\021\024\056\025\001\002\000\004\056\023" +
    "\001\002\000\050\003\uffcb\007\uffcb\022\uffcb\023\uffcb\024" +
    "\uffcb\025\uffcb\026\uffcb\027\uffcb\031\uffcb\032\uffcb\033\uffcb" +
    "\035\uffcb\036\uffcb\041\uffcb\042\uffcb\046\uffcb\047\uffcb\062" +
    "\uffcb\073\uffcb\001\002\000\026\003\051\004\053\011\032" +
    "\061\047\066\052\067\027\070\050\071\046\072\040\073" +
    "\030\001\002\000\050\003\uffd7\007\uffd7\022\uffd7\023\uffd7" +
    "\024\uffd7\025\uffd7\026\uffd7\027\uffd7\031\uffd7\032\uffd7\033" +
    "\uffd7\035\uffd7\036\uffd7\041\uffd7\042\uffd7\046\uffd7\047\uffd7" +
    "\062\uffd7\073\uffd7\001\002\000\024\003\uffc6\022\uffc6\023" +
    "\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\031\uffc6\042\uffc6" +
    "\001\002\000\050\003\uffed\005\uffed\007\uffed\010\uffed\011" +
    "\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\050\uffed" +
    "\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed\056\uffed\057" +
    "\uffed\060\uffed\001\002\000\060\003\uffec\004\126\005\uffec" +
    "\006\127\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014" +
    "\uffec\015\uffec\016\uffec\017\130\020\131\050\uffec\051\uffec" +
    "\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec\057\uffec\060" +
    "\uffec\001\002\000\050\003\uffeb\005\uffeb\007\uffeb\010\uffeb" +
    "\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\050" +
    "\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb" +
    "\057\uffeb\060\uffeb\001\002\000\006\066\125\067\124\001" +
    "\002\000\050\003\uffe8\005\uffe8\007\uffe8\010\uffe8\011\uffe8" +
    "\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\050\uffe8\051" +
    "\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8" +
    "\060\uffe8\001\002\000\050\003\uffef\005\uffef\007\uffef\010" +
    "\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef" +
    "\050\uffef\051\uffef\052\uffef\053\uffef\054\uffef\055\uffef\056" +
    "\uffef\057\uffef\060\uffef\001\002\000\050\003\ufff3\005\ufff3" +
    "\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015" +
    "\ufff3\016\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3" +
    "\055\ufff3\056\ufff3\057\ufff3\060\ufff3\001\002\000\050\003" +
    "\uffe4\005\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\050\uffe4\051\uffe4\052\uffe4\053" +
    "\uffe4\054\uffe4\055\uffe4\056\uffe4\057\060\060\uffe4\001\002" +
    "\000\050\003\uffea\005\uffea\007\uffea\010\uffea\011\uffea\012" +
    "\uffea\013\uffea\014\uffea\015\uffea\016\uffea\050\uffea\051\uffea" +
    "\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057\uffea\060" +
    "\uffea\001\002\000\006\003\uffd8\056\uffd8\001\002\000\050" +
    "\003\ufff1\005\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013" +
    "\ufff1\014\ufff1\015\ufff1\016\122\050\ufff1\051\ufff1\052\ufff1" +
    "\053\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\001" +
    "\002\000\050\003\uffdb\005\uffdb\007\uffdb\010\100\011\107" +
    "\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\050\105\051" +
    "\102\052\104\053\103\054\101\055\106\056\uffdb\057\uffdb" +
    "\060\uffdb\001\002\000\050\003\uffe2\005\uffe2\007\uffe2\010" +
    "\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2" +
    "\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056" +
    "\uffe2\057\uffe2\060\uffe2\001\002\000\050\003\ufff8\005\ufff8" +
    "\007\ufff8\010\ufff8\011\ufff8\012\072\013\071\014\070\015" +
    "\073\016\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8" +
    "\055\ufff8\056\ufff8\057\ufff8\060\ufff8\001\002\000\006\003" +
    "\067\056\066\001\002\000\006\003\uffd9\056\uffd9\001\002" +
    "\000\020\004\053\011\032\061\047\066\052\067\027\070" +
    "\050\073\030\001\002\000\050\003\uffe7\005\uffe7\007\uffe7" +
    "\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016" +
    "\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7" +
    "\056\uffe7\057\uffe7\060\uffe7\001\002\000\004\056\064\001" +
    "\002\000\050\003\uffee\005\uffee\007\uffee\010\uffee\011\uffee" +
    "\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\050\uffee\051" +
    "\uffee\052\uffee\053\uffee\054\uffee\055\uffee\056\uffee\057\uffee" +
    "\060\uffee\001\002\000\020\004\053\011\032\061\047\066" +
    "\052\067\027\070\050\073\030\001\002\000\050\003\uffe9" +
    "\005\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014" +
    "\uffe9\015\uffe9\016\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9" +
    "\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9\001\002\000" +
    "\010\003\uffda\056\uffda\060\056\001\002\000\020\004\053" +
    "\011\032\061\047\066\052\067\027\070\050\073\030\001" +
    "\002\000\050\003\uffe5\005\uffe5\007\uffe5\010\uffe5\011\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\050\uffe5\051" +
    "\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5" +
    "\060\uffe5\001\002\000\020\004\053\011\032\061\047\066" +
    "\052\067\027\070\050\073\030\001\002\000\050\003\uffe3" +
    "\005\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014" +
    "\uffe3\015\uffe3\016\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3" +
    "\054\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3\001\002\000" +
    "\006\005\063\060\056\001\002\000\050\003\ufff0\005\ufff0" +
    "\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015" +
    "\ufff0\016\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0" +
    "\055\ufff0\056\ufff0\057\ufff0\060\ufff0\001\002\000\050\003" +
    "\uffb8\007\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8" +
    "\027\uffb8\031\uffb8\032\uffb8\033\uffb8\035\uffb8\036\uffb8\041" +
    "\uffb8\042\uffb8\046\uffb8\047\uffb8\062\uffb8\073\uffb8\001\002" +
    "\000\050\003\uffe6\005\uffe6\007\uffe6\010\uffe6\011\uffe6\012" +
    "\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\050\uffe6\051\uffe6" +
    "\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060" +
    "\uffe6\001\002\000\050\003\uffd2\007\uffd2\022\uffd2\023\uffd2" +
    "\024\uffd2\025\uffd2\026\uffd2\027\uffd2\031\uffd2\032\uffd2\033" +
    "\uffd2\035\uffd2\036\uffd2\041\uffd2\042\uffd2\046\uffd2\047\uffd2" +
    "\062\uffd2\073\uffd2\001\002\000\050\003\uffc3\007\uffc3\022" +
    "\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\031\uffc3" +
    "\032\uffc3\033\uffc3\035\uffc3\036\uffc3\041\uffc3\042\uffc3\046" +
    "\uffc3\047\uffc3\062\uffc3\073\uffc3\001\002\000\020\004\053" +
    "\011\032\061\047\066\052\067\027\070\050\073\030\001" +
    "\002\000\020\004\053\011\032\061\047\066\052\067\027" +
    "\070\050\073\030\001\002\000\020\004\053\011\032\061" +
    "\047\066\052\067\027\070\050\073\030\001\002\000\020" +
    "\004\053\011\032\061\047\066\052\067\027\070\050\073" +
    "\030\001\002\000\050\003\ufff4\005\ufff4\007\ufff4\010\ufff4" +
    "\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\050" +
    "\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4" +
    "\057\ufff4\060\ufff4\001\002\000\050\003\ufff7\005\ufff7\007" +
    "\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7" +
    "\016\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055" +
    "\ufff7\056\ufff7\057\ufff7\060\ufff7\001\002\000\050\003\ufff6" +
    "\005\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014" +
    "\ufff6\015\ufff6\016\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6" +
    "\054\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6\001\002\000" +
    "\050\003\ufff5\005\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5" +
    "\013\ufff5\014\ufff5\015\ufff5\016\ufff5\050\ufff5\051\ufff5\052" +
    "\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5" +
    "\001\002\000\022\003\121\004\053\011\032\061\047\066" +
    "\052\067\027\070\050\073\030\001\002\000\020\004\053" +
    "\011\032\061\047\066\052\067\027\070\050\073\030\001" +
    "\002\000\020\004\053\011\032\061\047\066\052\067\027" +
    "\070\050\073\030\001\002\000\020\004\053\011\032\061" +
    "\047\066\052\067\027\070\050\073\030\001\002\000\020" +
    "\004\053\011\032\061\047\066\052\067\027\070\050\073" +
    "\030\001\002\000\020\004\053\011\032\061\047\066\052" +
    "\067\027\070\050\073\030\001\002\000\020\004\053\011" +
    "\032\061\047\066\052\067\027\070\050\073\030\001\002" +
    "\000\022\003\111\004\053\011\032\061\047\066\052\067" +
    "\027\070\050\073\030\001\002\000\050\003\ufffa\005\ufffa" +
    "\007\ufffa\010\ufffa\011\ufffa\012\072\013\071\014\070\015" +
    "\073\016\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa" +
    "\055\ufffa\056\ufffa\057\ufffa\060\ufffa\001\002\000\050\003" +
    "\ufff9\005\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9" +
    "\014\ufff9\015\ufff9\016\ufff9\050\ufff9\051\ufff9\052\ufff9\053" +
    "\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9\001\002" +
    "\000\050\003\uffdc\005\uffdc\007\uffdc\010\100\011\107\012" +
    "\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\050\uffdc\051\uffdc" +
    "\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060" +
    "\uffdc\001\002\000\050\003\uffe1\005\uffe1\007\uffe1\010\100" +
    "\011\107\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\050" +
    "\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1" +
    "\057\uffe1\060\uffe1\001\002\000\050\003\uffdf\005\uffdf\007" +
    "\uffdf\010\100\011\107\012\uffdf\013\uffdf\014\uffdf\015\uffdf" +
    "\016\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055" +
    "\uffdf\056\uffdf\057\uffdf\060\uffdf\001\002\000\050\003\uffde" +
    "\005\uffde\007\uffde\010\100\011\107\012\uffde\013\uffde\014" +
    "\uffde\015\uffde\016\uffde\050\uffde\051\uffde\052\uffde\053\uffde" +
    "\054\uffde\055\uffde\056\uffde\057\uffde\060\uffde\001\002\000" +
    "\050\003\uffe0\005\uffe0\007\uffe0\010\100\011\107\012\uffe0" +
    "\013\uffe0\014\uffe0\015\uffe0\016\uffe0\050\uffe0\051\uffe0\052" +
    "\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0" +
    "\001\002\000\050\003\uffdd\005\uffdd\007\uffdd\010\100\011" +
    "\107\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\050\uffdd" +
    "\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd\057" +
    "\uffdd\060\uffdd\001\002\000\050\003\ufffc\005\ufffc\007\ufffc" +
    "\010\ufffc\011\ufffc\012\072\013\071\014\070\015\073\016" +
    "\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc\055\ufffc" +
    "\056\ufffc\057\ufffc\060\ufffc\001\002\000\050\003\ufffb\005" +
    "\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb" +
    "\015\ufffb\016\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\054" +
    "\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb\001\002\000\020" +
    "\004\053\011\032\061\047\066\052\067\027\070\050\073" +
    "\030\001\002\000\050\003\ufff2\005\ufff2\007\ufff2\010\ufff2" +
    "\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\050" +
    "\ufff2\051\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2" +
    "\057\ufff2\060\ufff2\001\002\000\050\003\uffff\005\uffff\007" +
    "\uffff\010\uffff\011\uffff\012\uffff\013\uffff\014\uffff\015\uffff" +
    "\016\uffff\050\uffff\051\uffff\052\uffff\053\uffff\054\uffff\055" +
    "\uffff\056\uffff\057\uffff\060\uffff\001\002\000\050\003\000" +
    "\005\000\007\000\010\000\011\000\012\000\013\000\014" +
    "\000\015\000\016\000\050\000\051\000\052\000\053\000" +
    "\054\000\055\000\056\000\057\000\060\000\001\002\000" +
    "\016\005\142\066\143\067\137\071\136\072\141\073\135" +
    "\001\002\000\020\004\053\011\032\061\047\066\052\067" +
    "\027\070\050\073\030\001\002\000\050\003\ufffe\005\ufffe" +
    "\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015" +
    "\ufffe\016\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe" +
    "\055\ufffe\056\ufffe\057\ufffe\060\ufffe\001\002\000\050\003" +
    "\ufffd\005\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd" +
    "\014\ufffd\015\ufffd\016\ufffd\050\ufffd\051\ufffd\052\ufffd\053" +
    "\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd\060\ufffd\001\002" +
    "\000\010\007\133\010\100\011\107\001\002\000\052\003" +
    "\uff86\005\uff86\007\uff86\010\uff86\011\uff86\012\uff86\013\uff86" +
    "\014\uff86\015\uff86\016\uff86\034\uff86\050\uff86\051\uff86\052" +
    "\uff86\053\uff86\054\uff86\055\uff86\056\uff86\057\uff86\060\uff86" +
    "\001\002\000\004\005\167\001\002\000\010\005\uff44\006" +
    "\127\034\144\001\002\000\006\005\uff44\034\144\001\002" +
    "\000\006\005\uff44\034\144\001\002\000\006\005\uff44\034" +
    "\144\001\002\000\006\005\uff44\034\144\001\002\000\050" +
    "\003\uff4c\005\uff4c\007\uff4c\010\uff4c\011\uff4c\012\uff4c\013" +
    "\uff4c\014\uff4c\015\uff4c\016\uff4c\050\uff4c\051\uff4c\052\uff4c" +
    "\053\uff4c\054\uff4c\055\uff4c\056\uff4c\057\uff4c\060\uff4c\001" +
    "\002\000\006\005\uff44\034\144\001\002\000\014\066\153" +
    "\067\151\071\147\072\152\073\146\001\002\000\004\005" +
    "\uff4a\001\002\000\010\005\uff44\006\127\034\144\001\002" +
    "\000\006\005\uff44\034\144\001\002\000\006\005\uff44\034" +
    "\144\001\002\000\006\005\uff44\034\144\001\002\000\006" +
    "\005\uff44\034\144\001\002\000\006\005\uff44\034\144\001" +
    "\002\000\004\005\uff43\001\002\000\004\005\uff3f\001\002" +
    "\000\004\005\uff42\001\002\000\004\005\uff40\001\002\000" +
    "\004\005\uff3e\001\002\000\004\005\uff41\001\002\000\004" +
    "\005\uff46\001\002\000\004\005\uff47\001\002\000\004\005" +
    "\uff49\001\002\000\004\005\uff45\001\002\000\004\005\uff48" +
    "\001\002\000\050\003\uff4b\005\uff4b\007\uff4b\010\uff4b\011" +
    "\uff4b\012\uff4b\013\uff4b\014\uff4b\015\uff4b\016\uff4b\050\uff4b" +
    "\051\uff4b\052\uff4b\053\uff4b\054\uff4b\055\uff4b\056\uff4b\057" +
    "\uff4b\060\uff4b\001\002\000\010\003\175\021\173\056\174" +
    "\001\002\000\004\056\172\001\002\000\050\003\uffc9\007" +
    "\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9" +
    "\031\uffc9\032\uffc9\033\uffc9\035\uffc9\036\uffc9\041\uffc9\042" +
    "\uffc9\046\uffc9\047\uffc9\062\uffc9\073\uffc9\001\002\000\026" +
    "\003\177\004\053\011\032\061\047\066\052\067\027\070" +
    "\050\071\046\072\040\073\030\001\002\000\050\003\uffd5" +
    "\007\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027" +
    "\uffd5\031\uffd5\032\uffd5\033\uffd5\035\uffd5\036\uffd5\041\uffd5" +
    "\042\uffd5\046\uffd5\047\uffd5\062\uffd5\073\uffd5\001\002\000" +
    "\050\003\uffc4\007\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4" +
    "\026\uffc4\027\uffc4\031\uffc4\032\uffc4\033\uffc4\035\uffc4\036" +
    "\uffc4\041\uffc4\042\uffc4\046\uffc4\047\uffc4\062\uffc4\073\uffc4" +
    "\001\002\000\006\003\202\056\201\001\002\000\004\056" +
    "\200\001\002\000\050\003\uffb6\007\uffb6\022\uffb6\023\uffb6" +
    "\024\uffb6\025\uffb6\026\uffb6\027\uffb6\031\uffb6\032\uffb6\033" +
    "\uffb6\035\uffb6\036\uffb6\041\uffb6\042\uffb6\046\uffb6\047\uffb6" +
    "\062\uffb6\073\uffb6\001\002\000\050\003\uffd0\007\uffd0\022" +
    "\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\031\uffd0" +
    "\032\uffd0\033\uffd0\035\uffd0\036\uffd0\041\uffd0\042\uffd0\046" +
    "\uffd0\047\uffd0\062\uffd0\073\uffd0\001\002\000\050\003\uffc1" +
    "\007\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027" +
    "\uffc1\031\uffc1\032\uffc1\033\uffc1\035\uffc1\036\uffc1\041\uffc1" +
    "\042\uffc1\046\uffc1\047\uffc1\062\uffc1\073\uffc1\001\002\000" +
    "\006\021\206\056\207\001\002\000\004\056\205\001\002" +
    "\000\050\003\uffc8\007\uffc8\022\uffc8\023\uffc8\024\uffc8\025" +
    "\uffc8\026\uffc8\027\uffc8\031\uffc8\032\uffc8\033\uffc8\035\uffc8" +
    "\036\uffc8\041\uffc8\042\uffc8\046\uffc8\047\uffc8\062\uffc8\073" +
    "\uffc8\001\002\000\026\003\211\004\053\011\032\061\047" +
    "\066\052\067\027\070\050\071\046\072\040\073\030\001" +
    "\002\000\050\003\uffd4\007\uffd4\022\uffd4\023\uffd4\024\uffd4" +
    "\025\uffd4\026\uffd4\027\uffd4\031\uffd4\032\uffd4\033\uffd4\035" +
    "\uffd4\036\uffd4\041\uffd4\042\uffd4\046\uffd4\047\uffd4\062\uffd4" +
    "\073\uffd4\001\002\000\006\003\214\056\213\001\002\000" +
    "\004\056\212\001\002\000\050\003\uffb5\007\uffb5\022\uffb5" +
    "\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\031\uffb5\032" +
    "\uffb5\033\uffb5\035\uffb5\036\uffb5\041\uffb5\042\uffb5\046\uffb5" +
    "\047\uffb5\062\uffb5\073\uffb5\001\002\000\050\003\uffcf\007" +
    "\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf" +
    "\031\uffcf\032\uffcf\033\uffcf\035\uffcf\036\uffcf\041\uffcf\042" +
    "\uffcf\046\uffcf\047\uffcf\062\uffcf\073\uffcf\001\002\000\050" +
    "\003\uffc0\007\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026" +
    "\uffc0\027\uffc0\031\uffc0\032\uffc0\033\uffc0\035\uffc0\036\uffc0" +
    "\041\uffc0\042\uffc0\046\uffc0\047\uffc0\062\uffc0\073\uffc0\001" +
    "\002\000\006\021\216\056\217\001\002\000\024\004\053" +
    "\011\032\061\047\066\052\067\027\070\050\071\046\072" +
    "\040\073\030\001\002\000\050\003\uffcc\007\uffcc\022\uffcc" +
    "\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\031\uffcc\032" +
    "\uffcc\033\uffcc\035\uffcc\036\uffcc\041\uffcc\042\uffcc\046\uffcc" +
    "\047\uffcc\062\uffcc\073\uffcc\001\002\000\004\056\221\001" +
    "\002\000\050\003\uffbe\007\uffbe\022\uffbe\023\uffbe\024\uffbe" +
    "\025\uffbe\026\uffbe\027\uffbe\031\uffbe\032\uffbe\033\uffbe\035" +
    "\uffbe\036\uffbe\041\uffbe\042\uffbe\046\uffbe\047\uffbe\062\uffbe" +
    "\073\uffbe\001\002\000\004\056\233\001\002\000\006\021" +
    "\224\056\225\001\002\000\026\003\227\004\053\011\032" +
    "\061\047\066\052\067\027\070\050\071\046\072\040\073" +
    "\030\001\002\000\050\003\uffd3\007\uffd3\022\uffd3\023\uffd3" +
    "\024\uffd3\025\uffd3\026\uffd3\027\uffd3\031\uffd3\032\uffd3\033" +
    "\uffd3\035\uffd3\036\uffd3\041\uffd3\042\uffd3\046\uffd3\047\uffd3" +
    "\062\uffd3\073\uffd3\001\002\000\006\003\232\056\231\001" +
    "\002\000\004\056\230\001\002\000\050\003\uffb4\007\uffb4" +
    "\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\031" +
    "\uffb4\032\uffb4\033\uffb4\035\uffb4\036\uffb4\041\uffb4\042\uffb4" +
    "\046\uffb4\047\uffb4\062\uffb4\073\uffb4\001\002\000\050\003" +
    "\uffce\007\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce" +
    "\027\uffce\031\uffce\032\uffce\033\uffce\035\uffce\036\uffce\041" +
    "\uffce\042\uffce\046\uffce\047\uffce\062\uffce\073\uffce\001\002" +
    "\000\050\003\uffbf\007\uffbf\022\uffbf\023\uffbf\024\uffbf\025" +
    "\uffbf\026\uffbf\027\uffbf\031\uffbf\032\uffbf\033\uffbf\035\uffbf" +
    "\036\uffbf\041\uffbf\042\uffbf\046\uffbf\047\uffbf\062\uffbf\073" +
    "\uffbf\001\002\000\050\003\uffc7\007\uffc7\022\uffc7\023\uffc7" +
    "\024\uffc7\025\uffc7\026\uffc7\027\uffc7\031\uffc7\032\uffc7\033" +
    "\uffc7\035\uffc7\036\uffc7\041\uffc7\042\uffc7\046\uffc7\047\uffc7" +
    "\062\uffc7\073\uffc7\001\002\000\004\056\246\001\002\000" +
    "\010\003\240\021\236\056\237\001\002\000\026\003\242" +
    "\004\053\011\032\061\047\066\052\067\027\070\050\071" +
    "\046\072\040\073\030\001\002\000\050\003\uffd6\007\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\031" +
    "\uffd6\032\uffd6\033\uffd6\035\uffd6\036\uffd6\041\uffd6\042\uffd6" +
    "\046\uffd6\047\uffd6\062\uffd6\073\uffd6\001\002\000\050\003" +
    "\uffc5\007\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5" +
    "\027\uffc5\031\uffc5\032\uffc5\033\uffc5\035\uffc5\036\uffc5\041" +
    "\uffc5\042\uffc5\046\uffc5\047\uffc5\062\uffc5\073\uffc5\001\002" +
    "\000\006\003\245\056\244\001\002\000\004\056\243\001" +
    "\002\000\050\003\uffb7\007\uffb7\022\uffb7\023\uffb7\024\uffb7" +
    "\025\uffb7\026\uffb7\027\uffb7\031\uffb7\032\uffb7\033\uffb7\035" +
    "\uffb7\036\uffb7\041\uffb7\042\uffb7\046\uffb7\047\uffb7\062\uffb7" +
    "\073\uffb7\001\002\000\050\003\uffd1\007\uffd1\022\uffd1\023" +
    "\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\035\uffd1\036\uffd1\041\uffd1\042\uffd1\046\uffd1\047" +
    "\uffd1\062\uffd1\073\uffd1\001\002\000\050\003\uffc2\007\uffc2" +
    "\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\031" +
    "\uffc2\032\uffc2\033\uffc2\035\uffc2\036\uffc2\041\uffc2\042\uffc2" +
    "\046\uffc2\047\uffc2\062\uffc2\073\uffc2\001\002\000\050\003" +
    "\uffca\007\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca" +
    "\027\uffca\031\uffca\032\uffca\033\uffca\035\uffca\036\uffca\041" +
    "\uffca\042\uffca\046\uffca\047\uffca\062\uffca\073\uffca\001\002" +
    "\000\016\022\uff2a\023\uff2a\024\uff2a\025\uff2a\026\uff2a\027" +
    "\uff2a\001\002\000\004\073\u021f\001\002\000\004\073\u0215" +
    "\001\002\000\004\030\u0211\001\002\000\004\073\u0207\001" +
    "\002\000\004\073\u01fd\001\002\000\004\002\uff29\001\002" +
    "\000\004\073\257\001\002\000\004\004\260\001\002\000" +
    "\020\003\271\005\266\022\267\023\263\024\270\025\261" +
    "\026\262\001\002\000\004\073\u01fc\001\002\000\004\073" +
    "\u01fb\001\002\000\004\073\u01fa\001\002\000\006\005\uff55" +
    "\034\u01f6\001\002\000\004\005\u01f4\001\002\000\004\006" +
    "\273\001\002\000\004\073\u01f2\001\002\000\004\073\u01f1" +
    "\001\002\000\004\005\272\001\002\000\004\006\273\001" +
    "\002\000\026\003\310\007\302\031\306\032\304\033\313" +
    "\035\322\041\307\046\303\062\301\073\300\001\002\000" +
    "\016\022\uff63\023\uff63\024\uff63\025\uff63\026\uff63\027\uff63" +
    "\001\002\000\032\003\uff38\007\uff38\031\uff38\032\uff38\033" +
    "\uff38\035\uff38\036\uff38\041\uff38\046\uff38\047\uff38\062\uff38" +
    "\073\uff38\001\002\000\026\003\uff3a\007\uff3a\031\uff3a\032" +
    "\uff3a\033\uff3a\035\uff3a\041\uff3a\046\uff3a\062\uff3a\073\uff3a" +
    "\001\002\000\032\003\uff35\007\uff35\031\uff35\032\uff35\033" +
    "\uff35\035\uff35\036\uff35\041\uff35\046\uff35\047\uff35\062\uff35" +
    "\073\uff35\001\002\000\006\006\u01e4\021\u01e3\001\002\000" +
    "\004\063\u01c0\001\002\000\056\002\uff3c\003\uff3c\007\uff3c" +
    "\022\uff3c\023\uff3c\024\uff3c\025\uff3c\026\uff3c\027\uff3c\031" +
    "\uff3c\032\uff3c\033\uff3c\035\uff3c\036\uff3c\040\uff3c\041\uff3c" +
    "\046\uff3c\047\uff3c\062\uff3c\064\uff3c\065\uff3c\073\uff3c\001" +
    "\002\000\022\004\053\011\032\056\u01bd\061\047\066\052" +
    "\067\027\070\050\073\030\001\002\000\006\003\u01b9\073" +
    "\u01b8\001\002\000\032\003\uff33\007\uff33\031\uff33\032\uff33" +
    "\033\uff33\035\uff33\036\uff33\041\uff33\046\uff33\047\uff33\062" +
    "\uff33\073\uff33\001\002\000\016\003\u0148\022\u014a\023\013" +
    "\024\017\025\u0149\026\014\001\002\000\004\004\u0127\001" +
    "\002\000\024\007\u0126\021\334\022\343\023\336\024\342" +
    "\025\340\026\337\032\341\056\335\001\002\000\032\003" +
    "\uff37\007\uff37\031\uff37\032\uff37\033\uff37\035\uff37\036\uff37" +
    "\041\uff37\046\uff37\047\uff37\062\uff37\073\uff37\001\002\000" +
    "\032\003\uff30\007\uff30\031\uff30\032\uff30\033\uff30\035\uff30" +
    "\036\uff30\041\uff30\046\uff30\047\uff30\062\uff30\073\uff30\001" +
    "\002\000\020\003\u011a\066\u011e\067\u011c\070\u0118\071\u011b" +
    "\072\u011d\073\u0119\001\002\000\032\003\uff36\007\uff36\031" +
    "\uff36\032\uff36\033\uff36\035\uff36\036\uff36\041\uff36\046\uff36" +
    "\047\uff36\062\uff36\073\uff36\001\002\000\026\003\333\007" +
    "\u0117\031\306\032\304\033\313\035\322\041\307\046\303" +
    "\062\301\073\300\001\002\000\032\003\uff31\007\uff31\031" +
    "\uff31\032\uff31\033\uff31\035\uff31\036\uff31\041\uff31\046\uff31" +
    "\047\uff31\062\uff31\073\uff31\001\002\000\032\003\uff32\007" +
    "\uff32\031\uff32\032\uff32\033\uff32\035\uff32\036\uff32\041\uff32" +
    "\046\uff32\047\uff32\062\uff32\073\uff32\001\002\000\032\003" +
    "\uff2f\007\uff2f\031\uff2f\032\uff2f\033\uff2f\035\uff2f\036\uff2f" +
    "\041\uff2f\046\uff2f\047\uff2f\062\uff2f\073\uff2f\001\002\000" +
    "\032\003\uff34\007\uff34\031\uff34\032\uff34\033\uff34\035\uff34" +
    "\036\uff34\041\uff34\046\uff34\047\uff34\062\uff34\073\uff34\001" +
    "\002\000\026\003\326\031\306\032\304\033\313\035\322" +
    "\041\307\046\303\047\324\062\301\073\300\001\002\000" +
    "\030\003\uff6f\031\uff6f\032\uff6f\033\uff6f\035\uff6f\036\uff6f" +
    "\041\uff6f\046\uff6f\047\uff6f\062\uff6f\073\uff6f\001\002\000" +
    "\004\056\u0115\001\002\000\030\003\uff6e\031\uff6e\032\uff6e" +
    "\033\uff6e\035\uff6e\036\uff6e\041\uff6e\046\uff6e\047\uff6e\062" +
    "\uff6e\073\uff6e\001\002\000\024\021\334\022\343\023\336" +
    "\024\342\025\340\026\337\032\341\036\u0111\056\335\001" +
    "\002\000\030\003\333\031\306\032\304\033\313\035\322" +
    "\036\331\041\307\046\303\047\324\062\301\073\300\001" +
    "\002\000\030\003\uff6d\031\uff6d\032\uff6d\033\uff6d\035\uff6d" +
    "\036\uff6d\041\uff6d\046\uff6d\047\uff6d\062\uff6d\073\uff6d\001" +
    "\002\000\004\037\u010b\001\002\000\030\003\uff6c\031\uff6c" +
    "\032\uff6c\033\uff6c\035\uff6c\036\uff6c\041\uff6c\046\uff6c\047" +
    "\uff6c\062\uff6c\073\uff6c\001\002\000\022\021\334\022\343" +
    "\023\336\024\342\025\340\026\337\032\341\056\335\001" +
    "\002\000\024\004\053\011\032\061\047\066\052\067\027" +
    "\070\050\071\046\072\040\073\030\001\002\000\050\003" +
    "\uffcd\007\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd" +
    "\027\uffcd\031\uffcd\032\uffcd\033\uffcd\035\uffcd\036\uffcd\041" +
    "\uffcd\042\uffcd\046\uffcd\047\uffcd\062\uffcd\073\uffcd\001\002" +
    "\000\004\073\u0107\001\002\000\004\073\u0105\001\002\000" +
    "\004\073\372\001\002\000\004\073\370\001\002\000\004" +
    "\073\366\001\002\000\004\073\344\001\002\000\006\006" +
    "\346\056\345\001\002\000\050\003\uffbd\007\uffbd\022\uffbd" +
    "\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\031\uffbd\032" +
    "\uffbd\033\uffbd\035\uffbd\036\uffbd\041\uffbd\042\uffbd\046\uffbd" +
    "\047\uffbd\062\uffbd\073\uffbd\001\002\000\004\066\347\001" +
    "\002\000\004\007\350\001\002\000\006\021\351\056\352" +
    "\001\002\000\004\006\353\001\002\000\032\003\uffad\007" +
    "\uffad\031\uffad\032\uffad\033\uffad\035\uffad\036\uffad\041\uffad" +
    "\046\uffad\047\uffad\062\uffad\073\uffad\001\002\000\010\066" +
    "\357\071\355\073\354\001\002\000\006\007\uff8c\034\uff8c" +
    "\001\002\000\006\007\uff8d\034\uff8d\001\002\000\006\007" +
    "\361\034\360\001\002\000\006\007\uff8e\034\uff8e\001\002" +
    "\000\010\066\365\071\364\073\363\001\002\000\004\056" +
    "\362\001\002\000\032\003\uff9d\007\uff9d\031\uff9d\032\uff9d" +
    "\033\uff9d\035\uff9d\036\uff9d\041\uff9d\046\uff9d\047\uff9d\062" +
    "\uff9d\073\uff9d\001\002\000\006\007\uff89\034\uff89\001\002" +
    "\000\006\007\uff8a\034\uff8a\001\002\000\006\007\uff8b\034" +
    "\uff8b\001\002\000\004\056\367\001\002\000\050\003\uffbb" +
    "\007\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027" +
    "\uffbb\031\uffbb\032\uffbb\033\uffbb\035\uffbb\036\uffbb\041\uffbb" +
    "\042\uffbb\046\uffbb\047\uffbb\062\uffbb\073\uffbb\001\002\000" +
    "\004\056\371\001\002\000\032\003\uff83\007\uff83\031\uff83" +
    "\032\uff83\033\uff83\035\uff83\036\uff83\041\uff83\046\uff83\047" +
    "\uff83\062\uff83\073\uff83\001\002\000\006\006\374\056\373" +
    "\001\002\000\050\003\uffba\007\uffba\022\uffba\023\uffba\024" +
    "\uffba\025\uffba\026\uffba\027\uffba\031\uffba\032\uffba\033\uffba" +
    "\035\uffba\036\uffba\041\uffba\042\uffba\046\uffba\047\uffba\062" +
    "\uffba\073\uffba\001\002\000\004\066\375\001\002\000\004" +
    "\007\376\001\002\000\006\021\377\056\u0100\001\002\000" +
    "\004\006\u0101\001\002\000\032\003\uffa5\007\uffa5\031\uffa5" +
    "\032\uffa5\033\uffa5\035\uffa5\036\uffa5\041\uffa5\046\uffa5\047" +
    "\uffa5\062\uffa5\073\uffa5\001\002\000\010\066\357\071\355" +
    "\073\354\001\002\000\006\007\u0103\034\360\001\002\000" +
    "\004\056\u0104\001\002\000\032\003\uff94\007\uff94\031\uff94" +
    "\032\uff94\033\uff94\035\uff94\036\uff94\041\uff94\046\uff94\047" +
    "\uff94\062\uff94\073\uff94\001\002\000\004\056\u0106\001\002" +
    "\000\050\003\uffb9\007\uffb9\022\uffb9\023\uffb9\024\uffb9\025" +
    "\uffb9\026\uffb9\027\uffb9\031\uffb9\032\uffb9\033\uffb9\035\uffb9" +
    "\036\uffb9\041\uffb9\042\uffb9\046\uffb9\047\uffb9\062\uffb9\073" +
    "\uffb9\001\002\000\004\056\u0108\001\002\000\050\003\uffbc" +
    "\007\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027" +
    "\uffbc\031\uffbc\032\uffbc\033\uffbc\035\uffbc\036\uffbc\041\uffbc" +
    "\042\uffbc\046\uffbc\047\uffbc\062\uffbc\073\uffbc\001\002\000" +
    "\004\056\u010a\001\002\000\032\003\uffb1\007\uffb1\031\uffb1" +
    "\032\uffb1\033\uffb1\035\uffb1\036\uffb1\041\uffb1\046\uffb1\047" +
    "\uffb1\062\uffb1\073\uffb1\001\002\000\020\004\053\011\032" +
    "\061\047\066\052\067\027\070\050\073\030\001\002\000" +
    "\006\056\u010d\060\056\001\002\000\004\040\u010e\001\002" +
    "\000\004\035\u010f\001\002\000\004\056\u0110\001\002\000" +
    "\032\003\uff71\007\uff71\031\uff71\032\uff71\033\uff71\035\uff71" +
    "\036\uff71\041\uff71\046\uff71\047\uff71\062\uff71\073\uff71\001" +
    "\002\000\004\037\u0112\001\002\000\004\035\u0113\001\002" +
    "\000\004\056\u0114\001\002\000\032\003\uff70\007\uff70\031" +
    "\uff70\032\uff70\033\uff70\035\uff70\036\uff70\041\uff70\046\uff70" +
    "\047\uff70\062\uff70\073\uff70\001\002\000\030\003\uff6b\031" +
    "\uff6b\032\uff6b\033\uff6b\035\uff6b\036\uff6b\041\uff6b\046\uff6b" +
    "\047\uff6b\062\uff6b\073\uff6b\001\002\000\026\003\uff39\007" +
    "\uff39\031\uff39\032\uff39\033\uff39\035\uff39\041\uff39\046\uff39" +
    "\062\uff39\073\uff39\001\002\000\056\002\uff3d\003\uff3d\007" +
    "\uff3d\022\uff3d\023\uff3d\024\uff3d\025\uff3d\026\uff3d\027\uff3d" +
    "\031\uff3d\032\uff3d\033\uff3d\035\uff3d\036\uff3d\040\uff3d\041" +
    "\uff3d\046\uff3d\047\uff3d\062\uff3d\064\uff3d\065\uff3d\073\uff3d" +
    "\001\002\000\004\056\u0125\001\002\000\004\056\u0124\001" +
    "\002\000\004\056\u0123\001\002\000\004\056\u0122\001\002" +
    "\000\004\056\u0121\001\002\000\004\056\u0120\001\002\000" +
    "\004\056\u011f\001\002\000\032\003\uff80\007\uff80\031\uff80" +
    "\032\uff80\033\uff80\035\uff80\036\uff80\041\uff80\046\uff80\047" +
    "\uff80\062\uff80\073\uff80\001\002\000\032\003\uff7c\007\uff7c" +
    "\031\uff7c\032\uff7c\033\uff7c\035\uff7c\036\uff7c\041\uff7c\046" +
    "\uff7c\047\uff7c\062\uff7c\073\uff7c\001\002\000\032\003\uff7f" +
    "\007\uff7f\031\uff7f\032\uff7f\033\uff7f\035\uff7f\036\uff7f\041" +
    "\uff7f\046\uff7f\047\uff7f\062\uff7f\073\uff7f\001\002\000\032" +
    "\003\uff7d\007\uff7d\031\uff7d\032\uff7d\033\uff7d\035\uff7d\036" +
    "\uff7d\041\uff7d\046\uff7d\047\uff7d\062\uff7d\073\uff7d\001\002" +
    "\000\032\003\uff7b\007\uff7b\031\uff7b\032\uff7b\033\uff7b\035" +
    "\uff7b\036\uff7b\041\uff7b\046\uff7b\047\uff7b\062\uff7b\073\uff7b" +
    "\001\002\000\032\003\uff81\007\uff81\031\uff81\032\uff81\033" +
    "\uff81\035\uff81\036\uff81\041\uff81\046\uff81\047\uff81\062\uff81" +
    "\073\uff81\001\002\000\032\003\uff7e\007\uff7e\031\uff7e\032" +
    "\uff7e\033\uff7e\035\uff7e\036\uff7e\041\uff7e\046\uff7e\047\uff7e" +
    "\062\uff7e\073\uff7e\001\002\000\056\002\uff3b\003\uff3b\007" +
    "\uff3b\022\uff3b\023\uff3b\024\uff3b\025\uff3b\026\uff3b\027\uff3b" +
    "\031\uff3b\032\uff3b\033\uff3b\035\uff3b\036\uff3b\040\uff3b\041" +
    "\uff3b\046\uff3b\047\uff3b\062\uff3b\064\uff3b\065\uff3b\073\uff3b" +
    "\001\002\000\006\003\u0128\031\012\001\002\000\020\005" +
    "\u0142\022\u0143\023\336\024\342\025\u0141\026\337\056\335" +
    "\001\002\000\004\042\u012a\001\002\000\006\066\u012c\067" +
    "\u012b\001\002\000\006\043\u0138\044\u0137\001\002\000\006" +
    "\043\u012e\044\u012d\001\002\000\004\066\u0133\001\002\000" +
    "\004\066\u012f\001\002\000\004\005\u0130\001\002\000\004" +
    "\045\u0131\001\002\000\004\006\273\001\002\000\032\003" +
    "\uff6a\007\uff6a\031\uff6a\032\uff6a\033\uff6a\035\uff6a\036\uff6a" +
    "\041\uff6a\046\uff6a\047\uff6a\062\uff6a\073\uff6a\001\002\000" +
    "\004\005\u0134\001\002\000\004\045\u0135\001\002\000\004" +
    "\006\273\001\002\000\032\003\uff69\007\uff69\031\uff69\032" +
    "\uff69\033\uff69\035\uff69\036\uff69\041\uff69\046\uff69\047\uff69" +
    "\062\uff69\073\uff69\001\002\000\004\067\u013d\001\002\000" +
    "\004\067\u0139\001\002\000\004\005\u013a\001\002\000\004" +
    "\045\u013b\001\002\000\004\006\273\001\002\000\032\003" +
    "\uff68\007\uff68\031\uff68\032\uff68\033\uff68\035\uff68\036\uff68" +
    "\041\uff68\046\uff68\047\uff68\062\uff68\073\uff68\001\002\000" +
    "\004\005\u013e\001\002\000\004\045\u013f\001\002\000\004" +
    "\006\273\001\002\000\032\003\uff67\007\uff67\031\uff67\032" +
    "\uff67\033\uff67\035\uff67\036\uff67\041\uff67\046\uff67\047\uff67" +
    "\062\uff67\073\uff67\001\002\000\004\073\u0147\001\002\000" +
    "\004\045\u0145\001\002\000\004\073\u0144\001\002\000\004" +
    "\056\345\001\002\000\004\006\273\001\002\000\032\003" +
    "\uff66\007\uff66\031\uff66\032\uff66\033\uff66\035\uff66\036\uff66" +
    "\041\uff66\046\uff66\047\uff66\062\uff66\073\uff66\001\002\000" +
    "\004\056\373\001\002\000\004\073\u01ae\001\002\000\006" +
    "\003\u017d\073\u017e\001\002\000\006\003\u014b\073\u014c\001" +
    "\002\000\006\006\u0174\056\023\001\002\000\012\003\u014d" +
    "\006\u014e\021\024\056\025\001\002\000\036\003\uffc6\007" +
    "\uffc6\031\uffc6\032\uffc6\033\uffc6\035\uffc6\036\uffc6\041\uffc6" +
    "\046\uffc6\047\uffc6\056\u016b\062\uffc6\066\u016c\073\uffc6\001" +
    "\002\000\006\003\u014f\066\u0150\001\002\000\004\007\u0164" +
    "\001\002\000\006\003\u0151\007\u0152\001\002\000\006\021" +
    "\u015e\056\u015f\001\002\000\010\003\u0155\021\u0153\056\u0154" +
    "\001\002\000\004\006\u0156\001\002\000\032\003\uffaf\007" +
    "\uffaf\031\uffaf\032\uffaf\033\uffaf\035\uffaf\036\uffaf\041\uffaf" +
    "\046\uffaf\047\uffaf\062\uffaf\073\uffaf\001\002\000\032\003" +
    "\uffa7\007\uffa7\031\uffa7\032\uffa7\033\uffa7\035\uffa7\036\uffa7" +
    "\041\uffa7\046\uffa7\047\uffa7\062\uffa7\073\uffa7\001\002\000" +
    "\012\003\u0157\066\357\071\355\073\354\001\002\000\004" +
    "\007\u015c\001\002\000\006\007\u0159\034\360\001\002\000" +
    "\006\003\u015b\056\u015a\001\002\000\032\003\uff9e\007\uff9e" +
    "\031\uff9e\032\uff9e\033\uff9e\035\uff9e\036\uff9e\041\uff9e\046" +
    "\uff9e\047\uff9e\062\uff9e\073\uff9e\001\002\000\032\003\uff97" +
    "\007\uff97\031\uff97\032\uff97\033\uff97\035\uff97\036\uff97\041" +
    "\uff97\046\uff97\047\uff97\062\uff97\073\uff97\001\002\000\004" +
    "\056\u015d\001\002\000\032\003\uff96\007\uff96\031\uff96\032" +
    "\uff96\033\uff96\035\uff96\036\uff96\041\uff96\046\uff96\047\uff96" +
    "\062\uff96\073\uff96\001\002\000\004\006\u0160\001\002\000" +
    "\032\003\uffa9\007\uffa9\031\uffa9\032\uffa9\033\uffa9\035\uffa9" +
    "\036\uffa9\041\uffa9\046\uffa9\047\uffa9\062\uffa9\073\uffa9\001" +
    "\002\000\010\066\357\071\355\073\354\001\002\000\006" +
    "\007\u0162\034\360\001\002\000\004\056\u0163\001\002\000" +
    "\032\003\uff99\007\uff99\031\uff99\032\uff99\033\uff99\035\uff99" +
    "\036\uff99\041\uff99\046\uff99\047\uff99\062\uff99\073\uff99\001" +
    "\002\000\006\021\u0165\056\u0166\001\002\000\004\006\u0167" +
    "\001\002\000\032\003\uffaa\007\uffaa\031\uffaa\032\uffaa\033" +
    "\uffaa\035\uffaa\036\uffaa\041\uffaa\046\uffaa\047\uffaa\062\uffaa" +
    "\073\uffaa\001\002\000\010\066\357\071\355\073\354\001" +
    "\002\000\006\007\u0169\034\360\001\002\000\004\056\u016a" +
    "\001\002\000\032\003\uff9a\007\uff9a\031\uff9a\032\uff9a\033" +
    "\uff9a\035\uff9a\036\uff9a\041\uff9a\046\uff9a\047\uff9a\062\uff9a" +
    "\073\uff9a\001\002\000\032\003\uffae\007\uffae\031\uffae\032" +
    "\uffae\033\uffae\035\uffae\036\uffae\041\uffae\046\uffae\047\uffae" +
    "\062\uffae\073\uffae\001\002\000\004\007\u016d\001\002\000" +
    "\006\021\u016e\056\u016f\001\002\000\004\006\u0170\001\002" +
    "\000\032\003\uffa8\007\uffa8\031\uffa8\032\uffa8\033\uffa8\035" +
    "\uffa8\036\uffa8\041\uffa8\046\uffa8\047\uffa8\062\uffa8\073\uffa8" +
    "\001\002\000\010\066\357\071\355\073\354\001\002\000" +
    "\006\007\u0172\034\360\001\002\000\004\056\u0173\001\002" +
    "\000\032\003\uff98\007\uff98\031\uff98\032\uff98\033\uff98\035" +
    "\uff98\036\uff98\041\uff98\046\uff98\047\uff98\062\uff98\073\uff98" +
    "\001\002\000\004\066\u0175\001\002\000\004\007\u0176\001" +
    "\002\000\006\021\u0177\056\u0178\001\002\000\004\006\u0179" +
    "\001\002\000\032\003\uffab\007\uffab\031\uffab\032\uffab\033" +
    "\uffab\035\uffab\036\uffab\041\uffab\046\uffab\047\uffab\062\uffab" +
    "\073\uffab\001\002\000\010\066\357\071\355\073\354\001" +
    "\002\000\006\007\u017b\034\360\001\002\000\004\056\u017c" +
    "\001\002\000\032\003\uff9b\007\uff9b\031\uff9b\032\uff9b\033" +
    "\uff9b\035\uff9b\036\uff9b\041\uff9b\046\uff9b\047\uff9b\062\uff9b" +
    "\073\uff9b\001\002\000\006\006\u01a5\056\205\001\002\000" +
    "\012\003\u017f\006\u0180\021\206\056\207\001\002\000\006" +
    "\056\u019c\066\u019d\001\002\000\006\003\u0181\066\u0182\001" +
    "\002\000\004\007\u0195\001\002\000\006\003\u0183\007\u0184" +
    "\001\002\000\006\021\u018f\056\u0190\001\002\000\010\003" +
    "\u0187\021\u0185\056\u0186\001\002\000\004\006\u0188\001\002" +
    "\000\032\003\uffa6\007\uffa6\031\uffa6\032\uffa6\033\uffa6\035" +
    "\uffa6\036\uffa6\041\uffa6\046\uffa6\047\uffa6\062\uffa6\073\uffa6" +
    "\001\002\000\032\003\uffa0\007\uffa0\031\uffa0\032\uffa0\033" +
    "\uffa0\035\uffa0\036\uffa0\041\uffa0\046\uffa0\047\uffa0\062\uffa0" +
    "\073\uffa0\001\002\000\012\003\u0189\066\357\071\355\073" +
    "\354\001\002\000\004\007\u018d\001\002\000\006\007\u018b" +
    "\034\360\001\002\000\004\056\u018c\001\002\000\032\003" +
    "\uff95\007\uff95\031\uff95\032\uff95\033\uff95\035\uff95\036\uff95" +
    "\041\uff95\046\uff95\047\uff95\062\uff95\073\uff95\001\002\000" +
    "\004\056\u018e\001\002\000\032\003\uff8f\007\uff8f\031\uff8f" +
    "\032\uff8f\033\uff8f\035\uff8f\036\uff8f\041\uff8f\046\uff8f\047" +
    "\uff8f\062\uff8f\073\uff8f\001\002\000\004\006\u0191\001\002" +
    "\000\032\003\uffa2\007\uffa2\031\uffa2\032\uffa2\033\uffa2\035" +
    "\uffa2\036\uffa2\041\uffa2\046\uffa2\047\uffa2\062\uffa2\073\uffa2" +
    "\001\002\000\010\066\357\071\355\073\354\001\002\000" +
    "\006\007\u0193\034\360\001\002\000\004\056\u0194\001\002" +
    "\000\032\003\uff91\007\uff91\031\uff91\032\uff91\033\uff91\035" +
    "\uff91\036\uff91\041\uff91\046\uff91\047\uff91\062\uff91\073\uff91" +
    "\001\002\000\006\021\u0196\056\u0197\001\002\000\004\006" +
    "\u0198\001\002\000\032\003\uffa3\007\uffa3\031\uffa3\032\uffa3" +
    "\033\uffa3\035\uffa3\036\uffa3\041\uffa3\046\uffa3\047\uffa3\062" +
    "\uffa3\073\uffa3\001\002\000\010\066\357\071\355\073\354" +
    "\001\002\000\006\007\u019a\034\360\001\002\000\004\056" +
    "\u019b\001\002\000\032\003\uff92\007\uff92\031\uff92\032\uff92" +
    "\033\uff92\035\uff92\036\uff92\041\uff92\046\uff92\047\uff92\062" +
    "\uff92\073\uff92\001\002\000\032\003\uff9f\007\uff9f\031\uff9f" +
    "\032\uff9f\033\uff9f\035\uff9f\036\uff9f\041\uff9f\046\uff9f\047" +
    "\uff9f\062\uff9f\073\uff9f\001\002\000\004\007\u019e\001\002" +
    "\000\006\021\u019f\056\u01a0\001\002\000\004\006\u01a1\001" +
    "\002\000\032\003\uffa1\007\uffa1\031\uffa1\032\uffa1\033\uffa1" +
    "\035\uffa1\036\uffa1\041\uffa1\046\uffa1\047\uffa1\062\uffa1\073" +
    "\uffa1\001\002\000\010\066\357\071\355\073\354\001\002" +
    "\000\006\007\u01a3\034\360\001\002\000\004\056\u01a4\001" +
    "\002\000\032\003\uff90\007\uff90\031\uff90\032\uff90\033\uff90" +
    "\035\uff90\036\uff90\041\uff90\046\uff90\047\uff90\062\uff90\073" +
    "\uff90\001\002\000\004\066\u01a6\001\002\000\004\007\u01a7" +
    "\001\002\000\006\021\u01a8\056\u01a9\001\002\000\004\006" +
    "\u01aa\001\002\000\032\003\uffa4\007\uffa4\031\uffa4\032\uffa4" +
    "\033\uffa4\035\uffa4\036\uffa4\041\uffa4\046\uffa4\047\uffa4\062" +
    "\uffa4\073\uffa4\001\002\000\010\066\357\071\355\073\354" +
    "\001\002\000\006\007\u01ac\034\360\001\002\000\004\056" +
    "\u01ad\001\002\000\032\003\uff93\007\uff93\031\uff93\032\uff93" +
    "\033\uff93\035\uff93\036\uff93\041\uff93\046\uff93\047\uff93\062" +
    "\uff93\073\uff93\001\002\000\010\006\u01af\021\216\056\217" +
    "\001\002\000\004\066\u01b0\001\002\000\004\007\u01b1\001" +
    "\002\000\006\021\u01b2\056\u01b3\001\002\000\004\006\u01b4" +
    "\001\002\000\032\003\uffac\007\uffac\031\uffac\032\uffac\033" +
    "\uffac\035\uffac\036\uffac\041\uffac\046\uffac\047\uffac\062\uffac" +
    "\073\uffac\001\002\000\010\066\357\071\355\073\354\001" +
    "\002\000\006\007\u01b6\034\360\001\002\000\004\056\u01b7" +
    "\001\002\000\032\003\uff9c\007\uff9c\031\uff9c\032\uff9c\033" +
    "\uff9c\035\uff9c\036\uff9c\041\uff9c\046\uff9c\047\uff9c\062\uff9c" +
    "\073\uff9c\001\002\000\006\003\u01bc\056\u01bb\001\002\000" +
    "\004\056\u01ba\001\002\000\032\003\uff84\007\uff84\031\uff84" +
    "\032\uff84\033\uff84\035\uff84\036\uff84\041\uff84\046\uff84\047" +
    "\uff84\062\uff84\073\uff84\001\002\000\032\003\uff85\007\uff85" +
    "\031\uff85\032\uff85\033\uff85\035\uff85\036\uff85\041\uff85\046" +
    "\uff85\047\uff85\062\uff85\073\uff85\001\002\000\032\003\uff82" +
    "\007\uff82\031\uff82\032\uff82\033\uff82\035\uff82\036\uff82\041" +
    "\uff82\046\uff82\047\uff82\062\uff82\073\uff82\001\002\000\032" +
    "\003\uff4e\007\uff4e\031\uff4e\032\uff4e\033\uff4e\035\uff4e\036" +
    "\uff4e\041\uff4e\046\uff4e\047\uff4e\062\uff4e\073\uff4e\001\002" +
    "\000\006\056\u01bf\060\056\001\002\000\032\003\uff4d\007" +
    "\uff4d\031\uff4d\032\uff4d\033\uff4d\035\uff4d\036\uff4d\041\uff4d" +
    "\046\uff4d\047\uff4d\062\uff4d\073\uff4d\001\002\000\004\004" +
    "\u01c1\001\002\000\022\003\u01c2\004\053\011\032\061\047" +
    "\066\052\067\027\070\050\073\030\001\002\000\004\005" +
    "\u01de\001\002\000\006\005\u01c4\060\056\001\002\000\004" +
    "\006\273\001\002\000\010\040\u01c7\064\u01cb\065\u01c9\001" +
    "\002\000\010\040\uff75\064\uff75\065\uff75\001\002\000\004" +
    "\062\u01dc\001\002\000\010\040\u01d5\064\u01cb\065\u01c9\001" +
    "\002\000\004\006\273\001\002\000\004\040\u01d0\001\002" +
    "\000\004\004\u01cc\001\002\000\020\004\053\011\032\061" +
    "\047\066\052\067\027\070\050\073\030\001\002\000\006" +
    "\005\u01ce\060\056\001\002\000\004\006\273\001\002\000" +
    "\010\040\uff73\064\uff73\065\uff73\001\002\000\004\062\u01d1" +
    "\001\002\000\004\056\u01d2\001\002\000\032\003\uff78\007" +
    "\uff78\031\uff78\032\uff78\033\uff78\035\uff78\036\uff78\041\uff78" +
    "\046\uff78\047\uff78\062\uff78\073\uff78\001\002\000\004\040" +
    "\uff72\001\002\000\010\040\uff74\064\uff74\065\uff74\001\002" +
    "\000\004\062\u01da\001\002\000\004\040\u01d7\001\002\000" +
    "\004\062\u01d8\001\002\000\004\056\u01d9\001\002\000\032" +
    "\003\uff77\007\uff77\031\uff77\032\uff77\033\uff77\035\uff77\036" +
    "\uff77\041\uff77\046\uff77\047\uff77\062\uff77\073\uff77\001\002" +
    "\000\004\056\u01db\001\002\000\032\003\uff79\007\uff79\031" +
    "\uff79\032\uff79\033\uff79\035\uff79\036\uff79\041\uff79\046\uff79" +
    "\047\uff79\062\uff79\073\uff79\001\002\000\004\056\u01dd\001" +
    "\002\000\032\003\uff7a\007\uff7a\031\uff7a\032\uff7a\033\uff7a" +
    "\035\uff7a\036\uff7a\041\uff7a\046\uff7a\047\uff7a\062\uff7a\073" +
    "\uff7a\001\002\000\004\006\273\001\002\000\004\040\u01e0" +
    "\001\002\000\004\062\u01e1\001\002\000\004\056\u01e2\001" +
    "\002\000\032\003\uff76\007\uff76\031\uff76\032\uff76\033\uff76" +
    "\035\uff76\036\uff76\041\uff76\046\uff76\047\uff76\062\uff76\073" +
    "\uff76\001\002\000\026\003\u01ed\004\053\011\032\061\047" +
    "\066\052\067\027\070\050\071\046\072\040\073\030\001" +
    "\002\000\020\004\053\011\032\061\047\066\052\067\027" +
    "\070\050\073\030\001\002\000\010\007\u01e6\010\100\011" +
    "\107\001\002\000\004\021\u01e7\001\002\000\022\004\053" +
    "\011\032\061\047\066\052\067\027\070\050\071\u01e9\073" +
    "\030\001\002\000\010\010\100\011\107\056\u01eb\001\002" +
    "\000\004\056\u01ea\001\002\000\032\003\uff87\007\uff87\031" +
    "\uff87\032\uff87\033\uff87\035\uff87\036\uff87\041\uff87\046\uff87" +
    "\047\uff87\062\uff87\073\uff87\001\002\000\032\003\uff88\007" +
    "\uff88\031\uff88\032\uff88\033\uff88\035\uff88\036\uff88\041\uff88" +
    "\046\uff88\047\uff88\062\uff88\073\uff88\001\002\000\006\003" +
    "\u01f0\056\u01ef\001\002\000\004\056\u01ee\001\002\000\032" +
    "\003\uffb2\007\uffb2\031\uffb2\032\uffb2\033\uffb2\035\uffb2\036" +
    "\uffb2\041\uffb2\046\uffb2\047\uffb2\062\uffb2\073\uffb2\001\002" +
    "\000\032\003\uffb3\007\uffb3\031\uffb3\032\uffb3\033\uffb3\035" +
    "\uffb3\036\uffb3\041\uffb3\046\uffb3\047\uffb3\062\uffb3\073\uffb3" +
    "\001\002\000\032\003\uffb0\007\uffb0\031\uffb0\032\uffb0\033" +
    "\uffb0\035\uffb0\036\uffb0\041\uffb0\046\uffb0\047\uffb0\062\uffb0" +
    "\073\uffb0\001\002\000\006\005\uff51\034\uff51\001\002\000" +
    "\006\005\uff53\034\uff53\001\002\000\016\022\uff65\023\uff65" +
    "\024\uff65\025\uff65\026\uff65\027\uff65\001\002\000\004\006" +
    "\273\001\002\000\016\022\uff64\023\uff64\024\uff64\025\uff64" +
    "\026\uff64\027\uff64\001\002\000\014\022\267\023\263\024" +
    "\270\025\261\026\262\001\002\000\004\005\uff56\001\002" +
    "\000\006\005\uff55\034\u01f6\001\002\000\004\005\uff54\001" +
    "\002\000\006\005\uff52\034\uff52\001\002\000\006\005\uff4f" +
    "\034\uff4f\001\002\000\006\005\uff50\034\uff50\001\002\000" +
    "\004\004\u01fe\001\002\000\020\003\u0201\005\u0200\022\267" +
    "\023\263\024\270\025\261\026\262\001\002\000\004\005" +
    "\u0205\001\002\000\004\006\273\001\002\000\004\005\u0202" +
    "\001\002\000\004\006\273\001\002\000\016\022\uff5d\023" +
    "\uff5d\024\uff5d\025\uff5d\026\uff5d\027\uff5d\001\002\000\016" +
    "\022\uff5f\023\uff5f\024\uff5f\025\uff5f\026\uff5f\027\uff5f\001" +
    "\002\000\004\006\273\001\002\000\016\022\uff5e\023\uff5e" +
    "\024\uff5e\025\uff5e\026\uff5e\027\uff5e\001\002\000\004\004" +
    "\u0208\001\002\000\020\003\u020b\005\u020a\022\267\023\263" +
    "\024\270\025\261\026\262\001\002\000\004\005\u020f\001" +
    "\002\000\004\006\273\001\002\000\004\005\u020c\001\002" +
    "\000\004\006\273\001\002\000\016\022\uff5a\023\uff5a\024" +
    "\uff5a\025\uff5a\026\uff5a\027\uff5a\001\002\000\016\022\uff5c" +
    "\023\uff5c\024\uff5c\025\uff5c\026\uff5c\027\uff5c\001\002\000" +
    "\004\006\273\001\002\000\016\022\uff5b\023\uff5b\024\uff5b" +
    "\025\uff5b\026\uff5b\027\uff5b\001\002\000\004\004\u0212\001" +
    "\002\000\004\005\u0213\001\002\000\004\006\273\001\002" +
    "\000\004\002\uff2c\001\002\000\004\004\u0216\001\002\000" +
    "\020\003\u0219\005\u0218\022\267\023\263\024\270\025\261" +
    "\026\262\001\002\000\004\005\u021d\001\002\000\004\006" +
    "\273\001\002\000\004\005\u021a\001\002\000\004\006\273" +
    "\001\002\000\016\022\uff60\023\uff60\024\uff60\025\uff60\026" +
    "\uff60\027\uff60\001\002\000\016\022\uff62\023\uff62\024\uff62" +
    "\025\uff62\026\uff62\027\uff62\001\002\000\004\006\273\001" +
    "\002\000\016\022\uff61\023\uff61\024\uff61\025\uff61\026\uff61" +
    "\027\uff61\001\002\000\004\004\u0220\001\002\000\020\003" +
    "\u0223\005\u0222\022\267\023\263\024\270\025\261\026\262" +
    "\001\002\000\004\005\u0227\001\002\000\004\006\273\001" +
    "\002\000\004\005\u0224\001\002\000\004\006\273\001\002" +
    "\000\016\022\uff57\023\uff57\024\uff57\025\uff57\026\uff57\027" +
    "\uff57\001\002\000\016\022\uff59\023\uff59\024\uff59\025\uff59" +
    "\026\uff59\027\uff59\001\002\000\004\006\273\001\002\000" +
    "\016\022\uff58\023\uff58\024\uff58\025\uff58\026\uff58\027\uff58" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0226\000\006\052\003\053\004\001\001\000\006\015" +
    "\010\041\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\040\246\051\254\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\002\030\003\036\004\041\005" +
    "\043\006\034\007\040\010\033\011\035\012\054\013\042" +
    "\014\044\021\053\046\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\002\030\003\036\004\041\005\043\006" +
    "\034\007\040\010\033\011\035\012\064\013\042\021\053" +
    "\046\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\002\030\003\036\004\041\005\043" +
    "\006\034\007\040\010\033\011\035\012\061\013\042\021" +
    "\053\046\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\002\030\003\036\004\041\005\043\006\034\007" +
    "\040\010\033\011\056\013\042\021\053\046\032\001\001" +
    "\000\002\001\001\000\026\002\030\003\036\004\041\005" +
    "\043\006\034\007\040\010\033\013\060\021\053\046\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\002\030\003\036\006\076\007" +
    "\040\010\033\021\053\046\032\001\001\000\020\002\030" +
    "\003\036\006\075\007\040\010\033\021\053\046\032\001" +
    "\001\000\020\002\030\003\036\006\074\007\040\010\033" +
    "\021\053\046\032\001\001\000\020\002\030\003\036\006" +
    "\073\007\040\010\033\021\053\046\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\002\030\003\036\005\117\006\034\007\040" +
    "\010\033\021\053\046\032\001\001\000\024\002\030\003" +
    "\036\004\116\005\043\006\034\007\040\010\033\021\053" +
    "\046\032\001\001\000\024\002\030\003\036\004\115\005" +
    "\043\006\034\007\040\010\033\021\053\046\032\001\001" +
    "\000\024\002\030\003\036\004\114\005\043\006\034\007" +
    "\040\010\033\021\053\046\032\001\001\000\024\002\030" +
    "\003\036\004\113\005\043\006\034\007\040\010\033\021" +
    "\053\046\032\001\001\000\024\002\030\003\036\004\112" +
    "\005\043\006\034\007\040\010\033\021\053\046\032\001" +
    "\001\000\024\002\030\003\036\004\111\005\043\006\034" +
    "\007\040\010\033\021\053\046\032\001\001\000\022\002" +
    "\030\003\036\005\107\006\034\007\040\010\033\021\053" +
    "\046\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\002\030\003\036\006\122" +
    "\007\040\010\033\021\053\046\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\137" +
    "\047\133\001\001\000\024\002\030\003\036\004\131\005" +
    "\043\006\034\007\040\010\033\021\053\046\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\165\001\001" +
    "\000\004\050\164\001\001\000\004\050\163\001\001\000" +
    "\004\050\162\001\001\000\004\050\161\001\001\000\002" +
    "\001\001\000\004\050\144\001\001\000\004\021\147\001" +
    "\001\000\002\001\001\000\004\050\160\001\001\000\004" +
    "\050\157\001\001\000\004\050\156\001\001\000\004\050" +
    "\155\001\001\000\004\050\154\001\001\000\004\050\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\002" +
    "\030\003\036\004\041\005\043\006\034\007\040\010\033" +
    "\011\035\012\054\013\042\014\175\021\053\046\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\002\030\003\036\004\041\005\043\006" +
    "\034\007\040\010\033\011\035\012\054\013\042\014\207" +
    "\021\053\046\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\002\030\003" +
    "\036\004\041\005\043\006\034\007\040\010\033\011\035" +
    "\012\054\013\042\014\217\021\053\046\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\002\030\003\036\004" +
    "\041\005\043\006\034\007\040\010\033\011\035\012\054" +
    "\013\042\014\225\021\053\046\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\002\030\003\036" +
    "\004\041\005\043\006\034\007\040\010\033\011\035\012" +
    "\054\013\042\014\240\021\053\046\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\042\264\043\263\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\u01f6\001" +
    "\001\000\002\001\001\000\004\024\u01f2\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\273\001\001\000\032\015\274\016\310\017\313\020\276" +
    "\022\275\023\314\025\320\026\304\027\315\030\311\033" +
    "\316\045\317\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\002\030\003\036" +
    "\004\041\005\043\006\034\007\040\010\033\011\035\012" +
    "\u01bd\013\042\021\053\046\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\015\274\016\310\017" +
    "\313\020\276\022\u0115\025\320\026\304\027\315\030\311" +
    "\033\316\045\317\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\015\274" +
    "\016\310\017\313\020\276\022\322\025\320\026\304\027" +
    "\315\030\311\031\326\032\324\033\316\045\317\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\015\274\016\310\017\313\020\276" +
    "\022\327\025\320\026\304\027\315\030\311\032\331\033" +
    "\316\045\317\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\002\030\003" +
    "\036\004\041\005\043\006\034\007\040\010\033\011\035" +
    "\012\054\013\042\014\u0108\021\053\046\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\355\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\u0101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\002\030\003\036\004\041" +
    "\005\043\006\034\007\040\010\033\011\035\012\u010b\013" +
    "\042\021\053\046\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\u0128\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\u0131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\u0135\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\u013b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\u013f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\u0145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\u0157\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\u0160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\u0167\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\u0170" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\u0179\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\u0189\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\u0191\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\u0198\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\u01a1\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\u01aa\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\u01b4" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\002\030\003\036\004\041\005\043\006\034\007\040\010" +
    "\033\011\035\012\u01c2\013\042\021\053\046\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\u01c4\001" +
    "\001\000\010\034\u01c7\035\u01c5\036\u01c9\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\035\u01d3\036\u01d5\001" +
    "\001\000\004\024\u01d2\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\002\030\003\036\004\041\005\043\006" +
    "\034\007\040\010\033\011\035\012\u01cc\013\042\021\053" +
    "\046\032\001\001\000\002\001\001\000\004\024\u01ce\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\u01de" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\002\030\003\036\004\041" +
    "\005\043\006\034\007\040\010\033\011\035\012\054\013" +
    "\042\014\u01eb\021\053\046\032\001\001\000\024\002\030" +
    "\003\036\004\u01e4\005\043\006\034\007\040\010\033\021" +
    "\053\046\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\002\030\003\036\004\u01e7\005\043\006\034\007" +
    "\040\010\033\021\053\046\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\u01f4\001\001\000\002" +
    "\001\001\000\004\043\u01f7\001\001\000\002\001\001\000" +
    "\004\044\u01f8\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\042\u01fe\043\263\001\001\000\002\001\001\000\004" +
    "\024\u0203\001\001\000\002\001\001\000\004\024\u0202\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\u0205" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\042" +
    "\u0208\043\263\001\001\000\002\001\001\000\004\024\u020d" +
    "\001\001\000\002\001\001\000\004\024\u020c\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\u020f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\u0213\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\042\u0216\043\263\001\001\000\002\001\001\000" +
    "\004\024\u021b\001\001\000\002\001\001\000\004\024\u021a" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\u021d\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\042\u0220\043\263\001\001\000\002\001\001\000\004\024" +
    "\u0225\001\001\000\002\001\001\000\004\024\u0224\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\u0227\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static int syntaxErrors = 0;

    public void syntax_error(Symbol s) {
        syntaxErrors++;
        System.err.println("\n ERROR DE SINTAXIS:");
        System.err.println("   Linea: " + (s.left+1));
        System.err.println("   Token inesperado: " + s.value);
    }
    
    public void report_error(String message, Object info) {
        System.err.println("ERROR: " + message);
    }
    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        System.err.println("\nERROR FATAL: No se puede recuperar del error de sintaxis");
        throw new Exception("Error de sintaxis irrecuperable en linea " + (s.left+1));
    }

    public void sePuedeoNo(){
        int lexerErrors = codigo.Lexer.errorCount; 
        
        if (lexerErrors == 0 && syntaxErrors == 0) {
            System.out.println("La gramatica si puede ser generada");
        }
        else {
            System.out.println("La gramatica no puede ser generada");
            System.out.println("Numero de errores en el lexer: " + lexerErrors); 
            System.out.println("Numero de errores en el parser: " + syntaxErrors);
        }
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // unary_negative ::= minus_operator int_literal 
            {
              Object RESULT =null;
		 System.out.println("Negativo entero"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_negative",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // unary_negative ::= minus_operator float_literal 
            {
              Object RESULT =null;
		 System.out.println("Negativo flotante"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_negative",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // postfix_expression ::= identifier increment_operator 
            {
              Object RESULT =null;
		 System.out.println("Incremento (++)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // postfix_expression ::= identifier decrement_operator 
            {
              Object RESULT =null;
		 System.out.println("Decremento (--)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // arithmetic_expression ::= arithmetic_expression plus_operator term 
            {
              Object RESULT =null;
		 System.out.println("Suma (+)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // arithmetic_expression ::= arithmetic_expression plus_operator error 
            {
              Object RESULT =null;
		 System.err.println("Error:En la expresión aritmética después de +"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // arithmetic_expression ::= arithmetic_expression minus_operator term 
            {
              Object RESULT =null;
		 System.out.println("Resta (-)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // arithmetic_expression ::= arithmetic_expression minus_operator error 
            {
              Object RESULT =null;
		 System.err.println("Error:En la expresión aritmética después de -"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // arithmetic_expression ::= term 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // term ::= term multiplication_operator power 
            {
              Object RESULT =null;
		 System.out.println("Multiplicacion (*)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // term ::= term division_operator power 
            {
              Object RESULT =null;
		 System.out.println("Division (/)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // term ::= term int_division_operator power 
            {
              Object RESULT =null;
		 System.out.println("Division entera (//)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // term ::= term modulo_operator power 
            {
              Object RESULT =null;
		 System.out.println("Modulo (%)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // term ::= power 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // power ::= factor power_operator power 
            {
              Object RESULT =null;
		 System.out.println("Potencia (^)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("power",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // power ::= factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("power",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // factor ::= left_parenthesis logical_expresion_and right_parenthesis 
            {
              Object RESULT =null;
		 System.out.println("Expresion entre parentesis reconocida"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // factor ::= arithmetic_operands 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // arithmetic_operands ::= int_literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operands",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // arithmetic_operands ::= float_literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operands",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // arithmetic_operands ::= identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operands",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // arithmetic_operands ::= unary_negative 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operands",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // arithmetic_operands ::= postfix_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operands",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // arithmetic_operands ::= array_access 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operands",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // arithmetic_operands ::= function_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operands",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // arithmetic_operands ::= bool_literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operands",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // arithmetic_operands ::= not_operator logical_expresion_and 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operands",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // logical_expresion_and ::= logical_expresion_and and_operator logical_expresion_or 
            {
              Object RESULT =null;
		 System.out.println("Operador logico AND (@)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expresion_and",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // logical_expresion_and ::= logical_expresion_or 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expresion_and",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // logical_expresion_or ::= logical_expresion_or or_operator relational_expression 
            {
              Object RESULT =null;
		 System.out.println("Operador logico OR (~)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expresion_or",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // logical_expresion_or ::= relational_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expresion_or",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // relational_expression ::= arithmetic_expression greater_operator arithmetic_expression 
            {
              Object RESULT =null;
		 System.out.println("Mayor que (>) reconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // relational_expression ::= arithmetic_expression less_operator arithmetic_expression 
            {
              Object RESULT =null;
		 System.out.println("Menor que (<) reconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // relational_expression ::= arithmetic_expression greater_equal_operator arithmetic_expression 
            {
              Object RESULT =null;
		 System.out.println("Mayor o igual que (>=) reconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // relational_expression ::= arithmetic_expression less_equal_operator arithmetic_expression 
            {
              Object RESULT =null;
		 System.out.println("Menor o igual que (<=) reconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // relational_expression ::= arithmetic_expression equal_operator arithmetic_expression 
            {
              Object RESULT =null;
		 System.out.println("Igual que (==) reconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // relational_expression ::= arithmetic_expression not_equal_operator arithmetic_expression 
            {
              Object RESULT =null;
		 System.out.println("Diferente que (!=) reconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // relational_expression ::= arithmetic_expression 
            {
              Object RESULT =null;
		 System.out.println("Expresión aritmética"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaration_values ::= logical_expresion_and 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_values",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaration_values ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_values",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declaration_values ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_values",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaration ::= let_keyword int_keyword identifier delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: int sin valor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaration ::= let_keyword float_keyword identifier delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: float sin valor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaration ::= let_keyword bool_keyword identifier delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: bool sin valor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaration ::= let_keyword char_keyword identifier delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: char sin valor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaration ::= let_keyword string_keyword identifier delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: string sin valor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaration ::= let_keyword int_keyword identifier assignment_operator declaration_values delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: int con valor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaration ::= let_keyword float_keyword identifier assignment_operator declaration_values delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: float con valor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declaration ::= let_keyword bool_keyword identifier assignment_operator declaration_values delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: bool con valor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declaration ::= let_keyword char_keyword identifier assignment_operator declaration_values delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: char con valor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // declaration ::= let_keyword string_keyword identifier assignment_operator declaration_values delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: string con valor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // declaration ::= error delimiter 
            {
              Object RESULT =null;
		
               System.err.println("DECLARACION con error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // declaration ::= let_keyword error identifier delimiter 
            {
              Object RESULT =null;
		 System.err.println("No declaro el tipo error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declaration ::= let_keyword int_keyword error delimiter 
            {
              Object RESULT =null;
		 System.err.println("No declaro el id error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declaration ::= let_keyword float_keyword error delimiter 
            {
              Object RESULT =null;
		 System.err.println("No declaro el id error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declaration ::= let_keyword bool_keyword error delimiter 
            {
              Object RESULT =null;
		 System.err.println("No declaro el id error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declaration ::= let_keyword char_keyword error delimiter 
            {
              Object RESULT =null;
		 System.err.println("No declaro el id error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declaration ::= let_keyword string_keyword error delimiter 
            {
              Object RESULT =null;
		 System.err.println("No declaro el id error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declaration ::= let_keyword int_keyword identifier error 
            {
              Object RESULT =null;
		 System.err.println("Error falta el delimitador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declaration ::= let_keyword float_keyword identifier error 
            {
              Object RESULT =null;
		 System.err.println("Error falta el delimitador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // declaration ::= let_keyword bool_keyword identifier error 
            {
              Object RESULT =null;
		 System.err.println("Error falta el delimitador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // declaration ::= let_keyword int_keyword identifier assignment_operator declaration_values error 
            {
              Object RESULT =null;
		 System.err.println("Error falta el delimitador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // declaration ::= let_keyword float_keyword identifier assignment_operator declaration_values error 
            {
              Object RESULT =null;
		 System.err.println("Error falta el delimitador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // declaration ::= let_keyword bool_keyword identifier assignment_operator declaration_values error 
            {
              Object RESULT =null;
		 System.err.println("Error falta el delimitador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // declaration ::= let_keyword char_keyword identifier assignment_operator declaration_values error 
            {
              Object RESULT =null;
		 System.err.println("Error falta el delimitador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // declaration ::= let_keyword string_keyword identifier assignment_operator declaration_values error 
            {
              Object RESULT =null;
		 System.err.println("Error falta el delimitador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // declaration ::= let_keyword error identifier assignment_operator declaration_values delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error falta el tipo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // declaration ::= error int_keyword identifier delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error falta el let"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // declaration ::= error float_keyword identifier delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error falta el let"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // declaration ::= error bool_keyword identifier delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error falta el let"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // declaration ::= error char_keyword identifier delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error falta el let"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // declaration ::= error string_keyword identifier delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error falta el let"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // declaration ::= let_keyword int_keyword identifier assignment_operator error delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en inicializacion de int"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // declaration ::= let_keyword float_keyword identifier assignment_operator error delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en inicializacion de float"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // declaration ::= let_keyword bool_keyword identifier assignment_operator error delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en inicializacion de bool"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // declaration ::= let_keyword char_keyword identifier assignment_operator error delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en inicializacion de char"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // declaration ::= let_keyword string_keyword identifier assignment_operator error delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en inicializacion de string"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // reassignment ::= identifier assignment_operator declaration_values delimiter 
            {
              Object RESULT =null;
		 System.out.println("Reasignación"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reassignment",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // reassignment ::= identifier assignment_operator error delimiter 
            {
              Object RESULT =null;
		 System.err.println("Reasignación con error, declare un valor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reassignment",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // reassignment ::= error assignment_operator declaration_values delimiter 
            {
              Object RESULT =null;
		 System.err.println("Reasignación con error, declare un id"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reassignment",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // reassignment ::= identifier assignment_operator declaration_values error 
            {
              Object RESULT =null;
		 System.err.println("Reasignación con error, falta el delimitador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reassignment",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // array_declaration ::= let_keyword int_keyword identifier left_block int_literal right_block delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: array int sin nada"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // array_declaration ::= let_keyword int_keyword identifier error delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // array_declaration ::= error int_keyword identifier left_block int_literal right_block delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta let"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // array_declaration ::= let_keyword error identifier left_block int_literal right_block delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta tipo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // array_declaration ::= let_keyword int_keyword error left_block int_literal right_block delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta id"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // array_declaration ::= let_keyword int_keyword identifier left_block error right_block delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta tamaño"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // array_declaration ::= let_keyword int_keyword identifier left_block int_literal error delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta ?"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // array_declaration ::= let_keyword int_keyword identifier error int_literal right_block delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta ¿"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // array_declaration ::= let_keyword int_keyword identifier left_block int_literal right_block error 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta delimitador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // array_declaration ::= let_keyword char_keyword identifier left_block int_literal right_block delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: array char sin nada"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // array_declaration ::= error char_keyword identifier left_block int_literal right_block delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta let"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // array_declaration ::= let_keyword char_keyword error left_block int_literal right_block delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta id"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // array_declaration ::= let_keyword char_keyword identifier left_block error right_block delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta tamaño"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // array_declaration ::= let_keyword char_keyword identifier left_block int_literal error delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta ?"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // array_declaration ::= let_keyword char_keyword identifier error int_literal right_block delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta ¿"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // array_declaration ::= let_keyword char_keyword identifier left_block int_literal right_block error 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta delimitador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // array_declaration ::= let_keyword char_keyword identifier error delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // array_declaration ::= let_keyword int_keyword identifier left_block int_literal right_block assignment_operator left_block array_literals right_block delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: array int con valores"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // array_declaration ::= error int_keyword identifier left_block int_literal right_block assignment_operator left_block array_literals right_block delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta let"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // array_declaration ::= let_keyword error identifier left_block int_literal right_block assignment_operator left_block array_literals right_block delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta tipo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // array_declaration ::= let_keyword int_keyword error left_block int_literal right_block assignment_operator left_block array_literals right_block delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta id"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // array_declaration ::= let_keyword int_keyword identifier left_block error right_block assignment_operator left_block array_literals right_block delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta tamaño"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // array_declaration ::= let_keyword int_keyword identifier left_block int_literal error assignment_operator left_block array_literals right_block delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta ?"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // array_declaration ::= let_keyword int_keyword identifier error int_literal right_block assignment_operator left_block array_literals right_block delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta ¿"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // array_declaration ::= let_keyword int_keyword identifier left_block int_literal right_block assignment_operator left_block array_literals right_block error 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta delimitador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // array_declaration ::= let_keyword int_keyword identifier left_block int_literal right_block assignment_operator left_block error right_block delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en inicializacion de array"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // array_declaration ::= let_keyword char_keyword identifier left_block int_literal right_block assignment_operator left_block array_literals right_block delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: arreglo char con valores"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // array_declaration ::= error char_keyword identifier left_block int_literal right_block assignment_operator left_block array_literals right_block delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta let"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // array_declaration ::= let_keyword char_keyword error left_block int_literal right_block assignment_operator left_block array_literals right_block delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta id"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // array_declaration ::= let_keyword char_keyword identifier left_block error right_block assignment_operator left_block array_literals right_block delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta tamaño"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // array_declaration ::= let_keyword char_keyword identifier left_block int_literal error assignment_operator left_block array_literals right_block delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta ?"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // array_declaration ::= let_keyword char_keyword identifier error int_literal right_block assignment_operator left_block array_literals right_block delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta ¿"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // array_declaration ::= let_keyword char_keyword identifier left_block int_literal right_block assignment_operator left_block error right_block delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en inicializacion de array"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // array_literals ::= int_literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_literals",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // array_literals ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_literals",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // array_literals ::= identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_literals",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // array_literals ::= array_literals comma_keyword int_literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_literals",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // array_literals ::= array_literals comma_keyword CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_literals",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // array_literals ::= array_literals comma_keyword identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_literals",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // assign_elements_array ::= identifier left_block arithmetic_expression right_block assignment_operator arithmetic_expression delimiter 
            {
              Object RESULT =null;
		 System.out.println("Asignacion a elemento de arreglo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_elements_array",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // assign_elements_array ::= identifier left_block arithmetic_expression right_block assignment_operator CHAR_LITERAL delimiter 
            {
              Object RESULT =null;
		 System.out.println("Asignacion a elemento de arreglo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_elements_array",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // array_access ::= identifier left_block arithmetic_expression right_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_access",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // input_statement ::= input_keyword identifier delimiter 
            {
              Object RESULT =null;
		 System.out.println("Input reconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // input_statement ::= input_keyword error delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en input"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // input_statement ::= error input_keyword identifier delimiter 
            {
              Object RESULT =null;
		 System.err.println("No se declaro el input"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // input_statement ::= input_keyword identifier error 
            {
              Object RESULT =null;
		 System.err.println("Error falta el delimitador en input"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // output_statement ::= output_keyword identifier delimiter 
            {
              Object RESULT =null;
		 System.out.println("Output id"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // output_statement ::= output_keyword int_literal delimiter 
            {
              Object RESULT =null;
		 System.out.println("Output entero"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // output_statement ::= output_keyword float_literal delimiter 
            {
              Object RESULT =null;
		 System.out.println("Output float"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // output_statement ::= output_keyword bool_literal delimiter 
            {
              Object RESULT =null;
		 System.out.println("Output booleano"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // output_statement ::= output_keyword CHAR_LITERAL delimiter 
            {
              Object RESULT =null;
		 System.out.println("Output char"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // output_statement ::= output_keyword STRING_LITERAL delimiter 
            {
              Object RESULT =null;
		 System.out.println("Output string"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // output_statement ::= output_keyword error delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en output"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // decide_of ::= decide_keyword of_keyword left_parenthesis logical_expresion_and right_parenthesis block end_keyword decide_keyword delimiter 
            {
              Object RESULT =null;
		 System.out.println("decide of normal"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decide_of",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // decide_of ::= decide_keyword of_keyword left_parenthesis logical_expresion_and right_parenthesis block elif_list end_keyword decide_keyword delimiter 
            {
              Object RESULT =null;
		 System.out.println("decide of con elif"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decide_of",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // decide_of ::= decide_keyword of_keyword left_parenthesis logical_expresion_and right_parenthesis block else_part end_keyword decide_keyword delimiter 
            {
              Object RESULT =null;
		 System.out.println("decide of con else"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decide_of",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // decide_of ::= decide_keyword of_keyword left_parenthesis logical_expresion_and right_parenthesis block elif_list else_part end_keyword decide_keyword delimiter 
            {
              Object RESULT =null;
		 System.out.println("decide of con elif y else"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decide_of",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // decide_of ::= decide_keyword of_keyword left_parenthesis error right_parenthesis block end_keyword decide_keyword delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en condicion de decide of"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decide_of",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // elif_list ::= elif_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // elif_list ::= elif_list elif_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // elif_part ::= elseif_keyword left_parenthesis logical_expresion_and right_parenthesis block 
            {
              Object RESULT =null;
		 System.out.println("elif"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_part",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // else_part ::= else_keyword block 
            {
              Object RESULT =null;
		 System.out.println("else"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_part",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // loop ::= loop_keyword loop_content exit_keyword when_keyword logical_expresion_and delimiter end_keyword loop_keyword delimiter 
            {
              Object RESULT =null;
		 System.out.println("Loop"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // loop ::= loop_keyword error exit_keyword when_keyword loop_keyword delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en contenido de loop"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // loop_content ::= statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_content",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // loop_content ::= break_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_content",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // loop_content ::= loop_content statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_content",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // loop_content ::= loop_content break_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_content",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // break_statement ::= break_keyword delimiter 
            {
              Object RESULT =null;
		 System.out.println("break"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("break_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // for_loop ::= for_keyword left_parenthesis declaration step_keyword int_literal to_keyword int_literal right_parenthesis do_keyword block 
            {
              Object RESULT =null;
		 System.out.println("for loop int to"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_loop",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // for_loop ::= for_keyword left_parenthesis declaration step_keyword int_literal downto_keyword int_literal right_parenthesis do_keyword block 
            {
              Object RESULT =null;
		 System.out.println("for loop int downto"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_loop",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // for_loop ::= for_keyword left_parenthesis declaration step_keyword float_literal to_keyword float_literal right_parenthesis do_keyword block 
            {
              Object RESULT =null;
		 System.out.println("for loop float to"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_loop",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // for_loop ::= for_keyword left_parenthesis declaration step_keyword float_literal downto_keyword float_literal right_parenthesis do_keyword block 
            {
              Object RESULT =null;
		 System.out.println("for loop float downto"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_loop",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // for_loop ::= for_keyword left_parenthesis error right_parenthesis do_keyword block 
            {
              Object RESULT =null;
		 
          System.err.println("Error en condicion de for")
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_loop",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // function ::= int_keyword identifier left_parenthesis right_parenthesis block 
            {
              Object RESULT =null;
		 System.out.println("funcion int sin parámetros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // function ::= int_keyword identifier left_parenthesis params right_parenthesis block 
            {
              Object RESULT =null;
		 System.out.println("funcion int con parámetros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // function ::= int_keyword identifier left_parenthesis error right_parenthesis block 
            {
              Object RESULT =null;
		 System.err.println("ERROR en parámetros de función int"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // function ::= float_keyword identifier left_parenthesis right_parenthesis block 
            {
              Object RESULT =null;
		 System.out.println("funcion float sin parámetros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // function ::= float_keyword identifier left_parenthesis params right_parenthesis block 
            {
              Object RESULT =null;
		 System.out.println("funcion float con parámetros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // function ::= float_keyword identifier left_parenthesis error right_parenthesis block 
            {
              Object RESULT =null;
		 System.err.println("ERROR en parámetros de función float"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // function ::= bool_keyword identifier left_parenthesis right_parenthesis block 
            {
              Object RESULT =null;
		 System.out.println("funcion bool sin parámetros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // function ::= bool_keyword identifier left_parenthesis params right_parenthesis block 
            {
              Object RESULT =null;
		 System.out.println("funcion bool con parámetros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // function ::= bool_keyword identifier left_parenthesis error right_parenthesis block 
            {
              Object RESULT =null;
		 System.err.println("ERROR en parámetros de función bool"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // function ::= char_keyword identifier left_parenthesis right_parenthesis block 
            {
              Object RESULT =null;
		 System.out.println("funcion char sin parámetros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // function ::= char_keyword identifier left_parenthesis params right_parenthesis block 
            {
              Object RESULT =null;
		 System.out.println("funcion char con parámetros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // function ::= char_keyword identifier left_parenthesis error right_parenthesis block 
            {
              Object RESULT =null;
		 System.err.println("ERROR en parámetros de función char"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // function ::= string_keyword identifier left_parenthesis right_parenthesis block 
            {
              Object RESULT =null;
		 System.out.println("funcion string sin parámetros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // function ::= string_keyword identifier left_parenthesis params right_parenthesis block 
            {
              Object RESULT =null;
		 System.out.println("funcion string con parámetros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // function ::= string_keyword identifier left_parenthesis error right_parenthesis block 
            {
              Object RESULT =null;
		 System.err.println("ERROR en parámetros de función string"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // params ::= param params_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // params_tail ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params_tail",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // params_tail ::= comma_keyword param params_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params_tail",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // param ::= int_keyword identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // param ::= float_keyword identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // param ::= bool_keyword identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // param ::= char_keyword identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // param ::= string_keyword identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // return_statement ::= return_keyword delimiter 
            {
              Object RESULT =null;
		 System.out.println("return vacio"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // return_statement ::= return_keyword logical_expresion_and delimiter 
            {
              Object RESULT =null;
		 System.out.println("return expresion logica"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // function_call ::= identifier left_parenthesis right_parenthesis 
            {
              Object RESULT =null;
		 System.out.println("Llamada a funcion sin argumentos"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // function_call ::= identifier left_parenthesis args right_parenthesis 
            {
              Object RESULT =null;
		 System.out.println("Llamada a funcion con argumentos"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // args ::= int_literal args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // args ::= float_literal args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // args ::= identifier args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // args ::= array_access args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // args ::= STRING_LITERAL args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // args ::= CHAR_LITERAL args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // args_tail ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_tail",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // args_tail ::= comma_keyword int_literal args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_tail",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // args_tail ::= comma_keyword float_literal args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_tail",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // args_tail ::= comma_keyword identifier args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_tail",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // args_tail ::= comma_keyword array_access args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_tail",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // args_tail ::= comma_keyword STRING_LITERAL args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_tail",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // args_tail ::= comma_keyword CHAR_LITERAL args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_tail",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // block ::= left_block statements right_block 
            {
              Object RESULT =null;
		 System.out.println("bloque con statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // block ::= left_block right_block 
            {
              Object RESULT =null;
		 System.out.println("bloque vacio"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // block ::= left_block error right_block 
            {
              Object RESULT =null;
		 System.err.println("bloque con error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // statements ::= statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // statement ::= declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // statement ::= reassignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // statement ::= array_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // statement ::= assign_elements_array 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // statement ::= input_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // statement ::= output_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // statement ::= decide_of 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // statement ::= loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // statement ::= for_loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // statement ::= return_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // global_variables ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_variables",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // global_variables ::= global_variables declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_variables",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // principal ::= void_keyword principal_keyword left_parenthesis right_parenthesis block 
            {
              Object RESULT =null;
		 System.out.println("\n>> FUNCION PRINCIPAL reconocida"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principal",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // functions ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // functions ::= functions function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // program ::= global_variables functions principal 
            {
              Object RESULT =null;
		 System.out.println("\n========== PROGRAMA COMPLETO VALIDADO ==========\n"); 
         parser.sePuedeoNo();
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
