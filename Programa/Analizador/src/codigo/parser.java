
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo;

import java_cup.runtime.*;
import java.lang.String;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\330\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\003\004\000\002\003\004\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\003\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\003\000\002\006" +
    "\005\000\002\006\003\000\002\007\005\000\002\007\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\004\000\002\012" +
    "\005\000\002\012\003\000\002\011\005\000\002\011\003" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\015\006\000\002\015\006\000\002\015\006" +
    "\000\002\015\006\000\002\015\006\000\002\015\010\000" +
    "\002\015\010\000\002\015\010\000\002\015\010\000\002" +
    "\015\010\000\002\015\004\000\002\015\006\000\002\015" +
    "\006\000\002\015\006\000\002\015\006\000\002\015\006" +
    "\000\002\015\006\000\002\015\006\000\002\015\006\000" +
    "\002\015\006\000\002\015\010\000\002\015\010\000\002" +
    "\015\010\000\002\015\010\000\002\015\010\000\002\015" +
    "\010\000\002\015\006\000\002\015\006\000\002\015\006" +
    "\000\002\015\006\000\002\015\006\000\002\015\010\000" +
    "\002\015\010\000\002\015\010\000\002\015\010\000\002" +
    "\015\010\000\002\016\006\000\002\016\006\000\002\016" +
    "\006\000\002\016\006\000\002\017\011\000\002\017\007" +
    "\000\002\017\011\000\002\017\011\000\002\017\011\000" +
    "\002\017\011\000\002\017\011\000\002\017\011\000\002" +
    "\017\011\000\002\017\011\000\002\017\011\000\002\017" +
    "\011\000\002\017\011\000\002\017\011\000\002\017\011" +
    "\000\002\017\011\000\002\017\007\000\002\017\015\000" +
    "\002\017\015\000\002\017\015\000\002\017\015\000\002" +
    "\017\015\000\002\017\015\000\002\017\015\000\002\017" +
    "\015\000\002\017\015\000\002\017\015\000\002\017\015" +
    "\000\002\017\015\000\002\017\015\000\002\017\015\000" +
    "\002\017\015\000\002\017\015\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\005\000\002\045" +
    "\005\000\002\045\005\000\002\020\011\000\002\020\011" +
    "\000\002\021\006\000\002\025\005\000\002\025\005\000" +
    "\002\025\006\000\002\025\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\036\011" +
    "\000\002\037\006\000\002\035\006\000\002\035\007\000" +
    "\002\035\007\000\002\035\010\000\002\035\017\000\002" +
    "\040\003\000\002\040\004\000\002\042\007\000\002\041" +
    "\006\000\002\043\005\000\002\044\006\000\002\030\003" +
    "\000\002\027\013\000\002\027\010\000\002\033\003\000" +
    "\002\033\003\000\002\033\004\000\002\033\004\000\002" +
    "\034\004\000\002\032\011\000\002\032\011\000\002\032" +
    "\011\000\002\032\011\000\002\031\006\000\002\047\004" +
    "\000\002\047\004\000\002\047\004\000\002\047\004\000" +
    "\002\047\004\000\002\046\006\000\002\046\007\000\002" +
    "\046\007\000\002\051\004\000\002\053\002\000\002\053" +
    "\005\000\002\052\004\000\002\052\004\000\002\052\004" +
    "\000\002\052\004\000\002\052\004\000\002\054\004\000" +
    "\002\054\005\000\002\055\005\000\002\055\006\000\002" +
    "\056\004\000\002\056\004\000\002\056\004\000\002\056" +
    "\004\000\002\056\004\000\002\056\004\000\002\057\002" +
    "\000\002\057\005\000\002\057\005\000\002\057\005\000" +
    "\002\057\005\000\002\057\005\000\002\057\005\000\002" +
    "\024\005\000\002\024\004\000\002\024\005\000\002\023" +
    "\003\000\002\023\004\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\062\002\000\002\062" +
    "\004\000\002\061\006\000\002\060\004\000\002\050\002" +
    "\000\002\050\004\000\002\063\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0211\000\022\003\uff30\024\uff30\025\uff30\026\uff30\027" +
    "\uff30\030\uff30\031\uff30\033\uff30\001\002\000\022\003\007" +
    "\024\uff2c\025\uff2c\026\uff2c\027\uff2c\030\uff2c\031\uff2c\033" +
    "\012\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\016\024\u0211\025\343\026\347\027\u0210\030" +
    "\344\060\342\001\002\000\016\024\255\025\252\026\256" +
    "\027\247\030\250\031\253\001\002\000\022\003\uff2f\024" +
    "\uff2f\025\uff2f\026\uff2f\027\uff2f\030\uff2f\031\uff2f\033\uff2f" +
    "\001\002\000\016\003\015\024\020\025\013\026\017\027" +
    "\016\030\014\001\002\000\006\003\234\074\235\001\002" +
    "\000\006\003\222\074\223\001\002\000\004\074\215\001" +
    "\002\000\006\003\204\074\203\001\002\000\006\003\171" +
    "\074\170\001\002\000\006\003\022\074\021\001\002\000" +
    "\010\003\026\023\024\060\025\001\002\000\004\060\023" +
    "\001\002\000\046\003\uffcb\007\uffcb\024\uffcb\025\uffcb\026" +
    "\uffcb\027\uffcb\030\uffcb\031\uffcb\033\uffcb\034\uffcb\035\uffcb" +
    "\037\uffcb\040\uffcb\043\uffcb\050\uffcb\051\uffcb\064\uffcb\074" +
    "\uffcb\001\002\000\026\003\051\004\053\013\032\063\047" +
    "\067\052\070\027\071\050\072\046\073\040\074\030\001" +
    "\002\000\046\003\uffd7\007\uffd7\024\uffd7\025\uffd7\026\uffd7" +
    "\027\uffd7\030\uffd7\031\uffd7\033\uffd7\034\uffd7\035\uffd7\037" +
    "\uffd7\040\uffd7\043\uffd7\050\uffd7\051\uffd7\064\uffd7\074\uffd7" +
    "\001\002\000\022\003\uffc6\024\uffc6\025\uffc6\026\uffc6\027" +
    "\uffc6\030\uffc6\031\uffc6\033\uffc6\001\002\000\050\003\uffed" +
    "\005\uffed\010\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016" +
    "\uffed\017\uffed\020\uffed\052\uffed\053\uffed\054\uffed\055\uffed" +
    "\056\uffed\057\uffed\060\uffed\061\uffed\062\uffed\001\002\000" +
    "\060\003\uffec\004\126\005\uffec\010\uffec\011\131\012\uffec" +
    "\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021" +
    "\127\022\130\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec" +
    "\057\uffec\060\uffec\061\uffec\062\uffec\001\002\000\050\003" +
    "\uffeb\005\uffeb\010\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb" +
    "\016\uffeb\017\uffeb\020\uffeb\052\uffeb\053\uffeb\054\uffeb\055" +
    "\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\001\002" +
    "\000\006\067\125\070\124\001\002\000\050\003\uffe8\005" +
    "\uffe8\010\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8" +
    "\017\uffe8\020\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\056" +
    "\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\001\002\000\050" +
    "\003\uffef\005\uffef\010\uffef\012\uffef\013\uffef\014\uffef\015" +
    "\uffef\016\uffef\017\uffef\020\uffef\052\uffef\053\uffef\054\uffef" +
    "\055\uffef\056\uffef\057\uffef\060\uffef\061\uffef\062\uffef\001" +
    "\002\000\050\003\ufff3\005\ufff3\010\ufff3\012\ufff3\013\ufff3" +
    "\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\052\ufff3\053" +
    "\ufff3\054\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3" +
    "\062\ufff3\001\002\000\050\003\uffe4\005\uffe4\010\uffe4\012" +
    "\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4" +
    "\052\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060" +
    "\uffe4\061\060\062\uffe4\001\002\000\050\003\uffea\005\uffea" +
    "\010\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017" +
    "\uffea\020\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea" +
    "\057\uffea\060\uffea\061\uffea\062\uffea\001\002\000\006\003" +
    "\uffd8\060\uffd8\001\002\000\050\003\ufff1\005\ufff1\010\ufff1" +
    "\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020" +
    "\122\052\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1" +
    "\060\ufff1\061\ufff1\062\ufff1\001\002\000\050\003\uffdb\005" +
    "\uffdb\010\uffdb\012\100\013\107\014\uffdb\015\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\052\105\053\102\054\104\055\103\056" +
    "\101\057\106\060\uffdb\061\uffdb\062\uffdb\001\002\000\050" +
    "\003\uffe2\005\uffe2\010\uffe2\012\uffe2\013\uffe2\014\uffe2\015" +
    "\uffe2\016\uffe2\017\uffe2\020\uffe2\052\uffe2\053\uffe2\054\uffe2" +
    "\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2\001" +
    "\002\000\050\003\ufff8\005\ufff8\010\ufff8\012\ufff8\013\ufff8" +
    "\014\072\015\071\016\070\017\073\020\ufff8\052\ufff8\053" +
    "\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8" +
    "\062\ufff8\001\002\000\006\003\067\060\066\001\002\000" +
    "\006\003\uffd9\060\uffd9\001\002\000\020\004\053\013\032" +
    "\063\047\067\052\070\027\071\050\074\030\001\002\000" +
    "\050\003\uffe7\005\uffe7\010\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\015\uffe7\016\uffe7\017\uffe7\020\uffe7\052\uffe7\053\uffe7\054" +
    "\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7" +
    "\001\002\000\004\060\064\001\002\000\050\003\uffee\005" +
    "\uffee\010\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee" +
    "\017\uffee\020\uffee\052\uffee\053\uffee\054\uffee\055\uffee\056" +
    "\uffee\057\uffee\060\uffee\061\uffee\062\uffee\001\002\000\020" +
    "\004\053\013\032\063\047\067\052\070\027\071\050\074" +
    "\030\001\002\000\050\003\uffe9\005\uffe9\010\uffe9\012\uffe9" +
    "\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\052" +
    "\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9" +
    "\061\uffe9\062\uffe9\001\002\000\010\003\uffda\060\uffda\062" +
    "\056\001\002\000\020\004\053\013\032\063\047\067\052" +
    "\070\027\071\050\074\030\001\002\000\050\003\uffe5\005" +
    "\uffe5\010\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5" +
    "\017\uffe5\020\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056" +
    "\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\001\002\000\020" +
    "\004\053\013\032\063\047\067\052\070\027\071\050\074" +
    "\030\001\002\000\050\003\uffe3\005\uffe3\010\uffe3\012\uffe3" +
    "\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\052" +
    "\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3" +
    "\061\uffe3\062\uffe3\001\002\000\006\005\063\062\056\001" +
    "\002\000\050\003\ufff0\005\ufff0\010\ufff0\012\ufff0\013\ufff0" +
    "\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\052\ufff0\053" +
    "\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0" +
    "\062\ufff0\001\002\000\046\003\uffb8\007\uffb8\024\uffb8\025" +
    "\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\033\uffb8\034\uffb8" +
    "\035\uffb8\037\uffb8\040\uffb8\043\uffb8\050\uffb8\051\uffb8\064" +
    "\uffb8\074\uffb8\001\002\000\050\003\uffe6\005\uffe6\010\uffe6" +
    "\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020" +
    "\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6" +
    "\060\uffe6\061\uffe6\062\uffe6\001\002\000\046\003\uffd2\007" +
    "\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2" +
    "\033\uffd2\034\uffd2\035\uffd2\037\uffd2\040\uffd2\043\uffd2\050" +
    "\uffd2\051\uffd2\064\uffd2\074\uffd2\001\002\000\046\003\uffc3" +
    "\007\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031" +
    "\uffc3\033\uffc3\034\uffc3\035\uffc3\037\uffc3\040\uffc3\043\uffc3" +
    "\050\uffc3\051\uffc3\064\uffc3\074\uffc3\001\002\000\020\004" +
    "\053\013\032\063\047\067\052\070\027\071\050\074\030" +
    "\001\002\000\020\004\053\013\032\063\047\067\052\070" +
    "\027\071\050\074\030\001\002\000\020\004\053\013\032" +
    "\063\047\067\052\070\027\071\050\074\030\001\002\000" +
    "\020\004\053\013\032\063\047\067\052\070\027\071\050" +
    "\074\030\001\002\000\050\003\ufff4\005\ufff4\010\ufff4\012" +
    "\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4" +
    "\052\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4\060" +
    "\ufff4\061\ufff4\062\ufff4\001\002\000\050\003\ufff7\005\ufff7" +
    "\010\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017" +
    "\ufff7\020\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7" +
    "\057\ufff7\060\ufff7\061\ufff7\062\ufff7\001\002\000\050\003" +
    "\ufff6\005\ufff6\010\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6" +
    "\016\ufff6\017\ufff6\020\ufff6\052\ufff6\053\ufff6\054\ufff6\055" +
    "\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6\062\ufff6\001\002" +
    "\000\050\003\ufff5\005\ufff5\010\ufff5\012\ufff5\013\ufff5\014" +
    "\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\052\ufff5\053\ufff5" +
    "\054\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5\062" +
    "\ufff5\001\002\000\022\003\121\004\053\013\032\063\047" +
    "\067\052\070\027\071\050\074\030\001\002\000\020\004" +
    "\053\013\032\063\047\067\052\070\027\071\050\074\030" +
    "\001\002\000\020\004\053\013\032\063\047\067\052\070" +
    "\027\071\050\074\030\001\002\000\020\004\053\013\032" +
    "\063\047\067\052\070\027\071\050\074\030\001\002\000" +
    "\020\004\053\013\032\063\047\067\052\070\027\071\050" +
    "\074\030\001\002\000\020\004\053\013\032\063\047\067" +
    "\052\070\027\071\050\074\030\001\002\000\020\004\053" +
    "\013\032\063\047\067\052\070\027\071\050\074\030\001" +
    "\002\000\022\003\111\004\053\013\032\063\047\067\052" +
    "\070\027\071\050\074\030\001\002\000\050\003\ufffa\005" +
    "\ufffa\010\ufffa\012\ufffa\013\ufffa\014\072\015\071\016\070" +
    "\017\073\020\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa\056" +
    "\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa\001\002\000\050" +
    "\003\ufff9\005\ufff9\010\ufff9\012\ufff9\013\ufff9\014\ufff9\015" +
    "\ufff9\016\ufff9\017\ufff9\020\ufff9\052\ufff9\053\ufff9\054\ufff9" +
    "\055\ufff9\056\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9\001" +
    "\002\000\050\003\uffdc\005\uffdc\010\uffdc\012\100\013\107" +
    "\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\052\uffdc\053" +
    "\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc" +
    "\062\uffdc\001\002\000\050\003\uffe1\005\uffe1\010\uffe1\012" +
    "\100\013\107\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1" +
    "\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060" +
    "\uffe1\061\uffe1\062\uffe1\001\002\000\050\003\uffdf\005\uffdf" +
    "\010\uffdf\012\100\013\107\014\uffdf\015\uffdf\016\uffdf\017" +
    "\uffdf\020\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf" +
    "\057\uffdf\060\uffdf\061\uffdf\062\uffdf\001\002\000\050\003" +
    "\uffde\005\uffde\010\uffde\012\100\013\107\014\uffde\015\uffde" +
    "\016\uffde\017\uffde\020\uffde\052\uffde\053\uffde\054\uffde\055" +
    "\uffde\056\uffde\057\uffde\060\uffde\061\uffde\062\uffde\001\002" +
    "\000\050\003\uffe0\005\uffe0\010\uffe0\012\100\013\107\014" +
    "\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\052\uffe0\053\uffe0" +
    "\054\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062" +
    "\uffe0\001\002\000\050\003\uffdd\005\uffdd\010\uffdd\012\100" +
    "\013\107\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\052" +
    "\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd" +
    "\061\uffdd\062\uffdd\001\002\000\050\003\ufffc\005\ufffc\010" +
    "\ufffc\012\ufffc\013\ufffc\014\072\015\071\016\070\017\073" +
    "\020\ufffc\052\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc\057" +
    "\ufffc\060\ufffc\061\ufffc\062\ufffc\001\002\000\050\003\ufffb" +
    "\005\ufffb\010\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016" +
    "\ufffb\017\ufffb\020\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb" +
    "\056\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\001\002\000" +
    "\020\004\053\013\032\063\047\067\052\070\027\071\050" +
    "\074\030\001\002\000\050\003\ufff2\005\ufff2\010\ufff2\012" +
    "\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2" +
    "\052\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060" +
    "\ufff2\061\ufff2\062\ufff2\001\002\000\050\003\uffff\005\uffff" +
    "\010\uffff\012\uffff\013\uffff\014\uffff\015\uffff\016\uffff\017" +
    "\uffff\020\uffff\052\uffff\053\uffff\054\uffff\055\uffff\056\uffff" +
    "\057\uffff\060\uffff\061\uffff\062\uffff\001\002\000\050\003" +
    "\000\005\000\010\000\012\000\013\000\014\000\015\000" +
    "\016\000\017\000\020\000\052\000\053\000\054\000\055" +
    "\000\056\000\057\000\060\000\061\000\062\000\001\002" +
    "\000\016\005\142\067\143\070\140\072\136\073\141\074" +
    "\135\001\002\000\050\003\ufffe\005\ufffe\010\ufffe\012\ufffe" +
    "\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\052" +
    "\ufffe\053\ufffe\054\ufffe\055\ufffe\056\ufffe\057\ufffe\060\ufffe" +
    "\061\ufffe\062\ufffe\001\002\000\050\003\ufffd\005\ufffd\010" +
    "\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd" +
    "\020\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\057" +
    "\ufffd\060\ufffd\061\ufffd\062\ufffd\001\002\000\020\004\053" +
    "\013\032\063\047\067\052\070\027\071\050\074\030\001" +
    "\002\000\010\010\133\012\100\013\107\001\002\000\052" +
    "\003\uff86\005\uff86\010\uff86\012\uff86\013\uff86\014\uff86\015" +
    "\uff86\016\uff86\017\uff86\020\uff86\036\uff86\052\uff86\053\uff86" +
    "\054\uff86\055\uff86\056\uff86\057\uff86\060\uff86\061\uff86\062" +
    "\uff86\001\002\000\004\005\167\001\002\000\010\005\uff46" +
    "\011\131\036\144\001\002\000\006\005\uff46\036\144\001" +
    "\002\000\006\005\uff46\036\144\001\002\000\006\005\uff46" +
    "\036\144\001\002\000\006\005\uff46\036\144\001\002\000" +
    "\050\003\uff4e\005\uff4e\010\uff4e\012\uff4e\013\uff4e\014\uff4e" +
    "\015\uff4e\016\uff4e\017\uff4e\020\uff4e\052\uff4e\053\uff4e\054" +
    "\uff4e\055\uff4e\056\uff4e\057\uff4e\060\uff4e\061\uff4e\062\uff4e" +
    "\001\002\000\006\005\uff46\036\144\001\002\000\014\067" +
    "\153\070\151\072\147\073\152\074\146\001\002\000\004" +
    "\005\uff4c\001\002\000\010\005\uff46\011\131\036\144\001" +
    "\002\000\006\005\uff46\036\144\001\002\000\006\005\uff46" +
    "\036\144\001\002\000\006\005\uff46\036\144\001\002\000" +
    "\006\005\uff46\036\144\001\002\000\006\005\uff46\036\144" +
    "\001\002\000\004\005\uff45\001\002\000\004\005\uff41\001" +
    "\002\000\004\005\uff44\001\002\000\004\005\uff42\001\002" +
    "\000\004\005\uff40\001\002\000\004\005\uff43\001\002\000" +
    "\004\005\uff48\001\002\000\004\005\uff4b\001\002\000\004" +
    "\005\uff49\001\002\000\004\005\uff47\001\002\000\004\005" +
    "\uff4a\001\002\000\050\003\uff4d\005\uff4d\010\uff4d\012\uff4d" +
    "\013\uff4d\014\uff4d\015\uff4d\016\uff4d\017\uff4d\020\uff4d\052" +
    "\uff4d\053\uff4d\054\uff4d\055\uff4d\056\uff4d\057\uff4d\060\uff4d" +
    "\061\uff4d\062\uff4d\001\002\000\010\003\175\023\173\060" +
    "\174\001\002\000\004\060\172\001\002\000\046\003\uffc9" +
    "\007\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031" +
    "\uffc9\033\uffc9\034\uffc9\035\uffc9\037\uffc9\040\uffc9\043\uffc9" +
    "\050\uffc9\051\uffc9\064\uffc9\074\uffc9\001\002\000\026\003" +
    "\177\004\053\013\032\063\047\067\052\070\027\071\050" +
    "\072\046\073\040\074\030\001\002\000\046\003\uffd5\007" +
    "\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5" +
    "\033\uffd5\034\uffd5\035\uffd5\037\uffd5\040\uffd5\043\uffd5\050" +
    "\uffd5\051\uffd5\064\uffd5\074\uffd5\001\002\000\046\003\uffc4" +
    "\007\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031" +
    "\uffc4\033\uffc4\034\uffc4\035\uffc4\037\uffc4\040\uffc4\043\uffc4" +
    "\050\uffc4\051\uffc4\064\uffc4\074\uffc4\001\002\000\006\003" +
    "\202\060\201\001\002\000\004\060\200\001\002\000\046" +
    "\003\uffb6\007\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030" +
    "\uffb6\031\uffb6\033\uffb6\034\uffb6\035\uffb6\037\uffb6\040\uffb6" +
    "\043\uffb6\050\uffb6\051\uffb6\064\uffb6\074\uffb6\001\002\000" +
    "\046\003\uffd0\007\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0" +
    "\030\uffd0\031\uffd0\033\uffd0\034\uffd0\035\uffd0\037\uffd0\040" +
    "\uffd0\043\uffd0\050\uffd0\051\uffd0\064\uffd0\074\uffd0\001\002" +
    "\000\046\003\uffc1\007\uffc1\024\uffc1\025\uffc1\026\uffc1\027" +
    "\uffc1\030\uffc1\031\uffc1\033\uffc1\034\uffc1\035\uffc1\037\uffc1" +
    "\040\uffc1\043\uffc1\050\uffc1\051\uffc1\064\uffc1\074\uffc1\001" +
    "\002\000\006\023\206\060\207\001\002\000\004\060\205" +
    "\001\002\000\046\003\uffc8\007\uffc8\024\uffc8\025\uffc8\026" +
    "\uffc8\027\uffc8\030\uffc8\031\uffc8\033\uffc8\034\uffc8\035\uffc8" +
    "\037\uffc8\040\uffc8\043\uffc8\050\uffc8\051\uffc8\064\uffc8\074" +
    "\uffc8\001\002\000\026\003\211\004\053\013\032\063\047" +
    "\067\052\070\027\071\050\072\046\073\040\074\030\001" +
    "\002\000\046\003\uffd4\007\uffd4\024\uffd4\025\uffd4\026\uffd4" +
    "\027\uffd4\030\uffd4\031\uffd4\033\uffd4\034\uffd4\035\uffd4\037" +
    "\uffd4\040\uffd4\043\uffd4\050\uffd4\051\uffd4\064\uffd4\074\uffd4" +
    "\001\002\000\006\003\214\060\213\001\002\000\004\060" +
    "\212\001\002\000\046\003\uffb5\007\uffb5\024\uffb5\025\uffb5" +
    "\026\uffb5\027\uffb5\030\uffb5\031\uffb5\033\uffb5\034\uffb5\035" +
    "\uffb5\037\uffb5\040\uffb5\043\uffb5\050\uffb5\051\uffb5\064\uffb5" +
    "\074\uffb5\001\002\000\046\003\uffcf\007\uffcf\024\uffcf\025" +
    "\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\037\uffcf\040\uffcf\043\uffcf\050\uffcf\051\uffcf\064" +
    "\uffcf\074\uffcf\001\002\000\046\003\uffc0\007\uffc0\024\uffc0" +
    "\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\033\uffc0\034" +
    "\uffc0\035\uffc0\037\uffc0\040\uffc0\043\uffc0\050\uffc0\051\uffc0" +
    "\064\uffc0\074\uffc0\001\002\000\006\023\216\060\217\001" +
    "\002\000\024\004\053\013\032\063\047\067\052\070\027" +
    "\071\050\072\046\073\040\074\030\001\002\000\046\003" +
    "\uffcc\007\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc" +
    "\031\uffcc\033\uffcc\034\uffcc\035\uffcc\037\uffcc\040\uffcc\043" +
    "\uffcc\050\uffcc\051\uffcc\064\uffcc\074\uffcc\001\002\000\004" +
    "\060\221\001\002\000\046\003\uffbe\007\uffbe\024\uffbe\025" +
    "\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\033\uffbe\034\uffbe" +
    "\035\uffbe\037\uffbe\040\uffbe\043\uffbe\050\uffbe\051\uffbe\064" +
    "\uffbe\074\uffbe\001\002\000\004\060\233\001\002\000\006" +
    "\023\224\060\225\001\002\000\026\003\227\004\053\013" +
    "\032\063\047\067\052\070\027\071\050\072\046\073\040" +
    "\074\030\001\002\000\046\003\uffd3\007\uffd3\024\uffd3\025" +
    "\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\033\uffd3\034\uffd3" +
    "\035\uffd3\037\uffd3\040\uffd3\043\uffd3\050\uffd3\051\uffd3\064" +
    "\uffd3\074\uffd3\001\002\000\006\003\232\060\231\001\002" +
    "\000\004\060\230\001\002\000\046\003\uffb4\007\uffb4\024" +
    "\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\033\uffb4" +
    "\034\uffb4\035\uffb4\037\uffb4\040\uffb4\043\uffb4\050\uffb4\051" +
    "\uffb4\064\uffb4\074\uffb4\001\002\000\046\003\uffce\007\uffce" +
    "\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\033" +
    "\uffce\034\uffce\035\uffce\037\uffce\040\uffce\043\uffce\050\uffce" +
    "\051\uffce\064\uffce\074\uffce\001\002\000\046\003\uffbf\007" +
    "\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf" +
    "\033\uffbf\034\uffbf\035\uffbf\037\uffbf\040\uffbf\043\uffbf\050" +
    "\uffbf\051\uffbf\064\uffbf\074\uffbf\001\002\000\046\003\uffc7" +
    "\007\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031" +
    "\uffc7\033\uffc7\034\uffc7\035\uffc7\037\uffc7\040\uffc7\043\uffc7" +
    "\050\uffc7\051\uffc7\064\uffc7\074\uffc7\001\002\000\004\060" +
    "\246\001\002\000\010\003\240\023\236\060\237\001\002" +
    "\000\026\003\242\004\053\013\032\063\047\067\052\070" +
    "\027\071\050\072\046\073\040\074\030\001\002\000\046" +
    "\003\uffd6\007\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030" +
    "\uffd6\031\uffd6\033\uffd6\034\uffd6\035\uffd6\037\uffd6\040\uffd6" +
    "\043\uffd6\050\uffd6\051\uffd6\064\uffd6\074\uffd6\001\002\000" +
    "\046\003\uffc5\007\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5" +
    "\030\uffc5\031\uffc5\033\uffc5\034\uffc5\035\uffc5\037\uffc5\040" +
    "\uffc5\043\uffc5\050\uffc5\051\uffc5\064\uffc5\074\uffc5\001\002" +
    "\000\006\003\245\060\244\001\002\000\004\060\243\001" +
    "\002\000\046\003\uffb7\007\uffb7\024\uffb7\025\uffb7\026\uffb7" +
    "\027\uffb7\030\uffb7\031\uffb7\033\uffb7\034\uffb7\035\uffb7\037" +
    "\uffb7\040\uffb7\043\uffb7\050\uffb7\051\uffb7\064\uffb7\074\uffb7" +
    "\001\002\000\046\003\uffd1\007\uffd1\024\uffd1\025\uffd1\026" +
    "\uffd1\027\uffd1\030\uffd1\031\uffd1\033\uffd1\034\uffd1\035\uffd1" +
    "\037\uffd1\040\uffd1\043\uffd1\050\uffd1\051\uffd1\064\uffd1\074" +
    "\uffd1\001\002\000\046\003\uffc2\007\uffc2\024\uffc2\025\uffc2" +
    "\026\uffc2\027\uffc2\030\uffc2\031\uffc2\033\uffc2\034\uffc2\035" +
    "\uffc2\037\uffc2\040\uffc2\043\uffc2\050\uffc2\051\uffc2\064\uffc2" +
    "\074\uffc2\001\002\000\046\003\uffca\007\uffca\024\uffca\025" +
    "\uffca\026\uffca\027\uffca\030\uffca\031\uffca\033\uffca\034\uffca" +
    "\035\uffca\037\uffca\040\uffca\043\uffca\050\uffca\051\uffca\064" +
    "\uffca\074\uffca\001\002\000\004\074\u020f\001\002\000\004" +
    "\074\u020e\001\002\000\004\006\274\001\002\000\004\074" +
    "\u020c\001\002\000\004\032\u0209\001\002\000\016\024\uff2b" +
    "\025\uff2b\026\uff2b\027\uff2b\030\uff2b\031\uff2b\001\002\000" +
    "\004\074\u0208\001\002\000\004\074\u0207\001\002\000\004" +
    "\002\uff2a\001\002\000\004\004\261\001\002\000\020\003" +
    "\272\005\267\024\270\025\264\026\271\027\262\030\263" +
    "\001\002\000\004\074\u0206\001\002\000\004\074\u0205\001" +
    "\002\000\004\074\u0204\001\002\000\006\005\uff57\036\u0200" +
    "\001\002\000\004\005\u01fe\001\002\000\004\006\274\001" +
    "\002\000\004\074\u01fc\001\002\000\004\074\u01fb\001\002" +
    "\000\004\005\273\001\002\000\004\006\274\001\002\000" +
    "\026\003\313\007\303\033\311\034\306\035\317\037\327" +
    "\043\312\050\304\064\302\074\301\001\002\000\016\024" +
    "\uff59\025\uff59\026\uff59\027\uff59\030\uff59\031\uff59\001\002" +
    "\000\032\003\uff3a\007\uff3a\033\uff3a\034\uff3a\035\uff3a\037" +
    "\uff3a\040\uff3a\043\uff3a\050\uff3a\051\uff3a\064\uff3a\074\uff3a" +
    "\001\002\000\026\003\uff3c\007\uff3c\033\uff3c\034\uff3c\035" +
    "\uff3c\037\uff3c\043\uff3c\050\uff3c\064\uff3c\074\uff3c\001\002" +
    "\000\032\003\uff37\007\uff37\033\uff37\034\uff37\035\uff37\037" +
    "\uff37\040\uff37\043\uff37\050\uff37\051\uff37\064\uff37\074\uff37" +
    "\001\002\000\006\011\u01f3\023\u0132\001\002\000\004\065" +
    "\u01e3\001\002\000\020\002\uff3e\024\uff3e\025\uff3e\026\uff3e" +
    "\027\uff3e\030\uff3e\031\uff3e\001\002\000\022\004\053\013" +
    "\032\060\u01e0\063\047\067\052\070\027\071\050\074\030" +
    "\001\002\000\010\004\u01bf\042\u01c2\066\u01c6\001\002\000" +
    "\006\003\u01bb\074\u01ba\001\002\000\004\006\u01b7\001\002" +
    "\000\032\003\uff35\007\uff35\033\uff35\034\uff35\035\uff35\037" +
    "\uff35\040\uff35\043\uff35\050\uff35\051\uff35\064\uff35\074\uff35" +
    "\001\002\000\016\003\u0147\024\u0149\025\013\026\017\027" +
    "\u0148\030\014\001\002\000\006\003\u0130\074\u0131\001\002" +
    "\000\024\007\u012e\023\341\024\350\025\343\026\347\027" +
    "\345\030\344\034\346\060\342\001\002\000\032\003\uff39" +
    "\007\uff39\033\uff39\034\uff39\035\uff39\037\uff39\040\uff39\043" +
    "\uff39\050\uff39\051\uff39\064\uff39\074\uff39\001\002\000\032" +
    "\003\uff32\007\uff32\033\uff32\034\uff32\035\uff32\037\uff32\040" +
    "\uff32\043\uff32\050\uff32\051\uff32\064\uff32\074\uff32\001\002" +
    "\000\026\003\u0121\033\311\034\306\035\317\037\327\043" +
    "\312\050\304\051\332\064\302\074\301\001\002\000\020" +
    "\003\u0115\067\u0119\070\u0117\071\u0113\072\u0116\073\u0118\074" +
    "\u0114\001\002\000\032\003\uff38\007\uff38\033\uff38\034\uff38" +
    "\035\uff38\037\uff38\040\uff38\043\uff38\050\uff38\051\uff38\064" +
    "\uff38\074\uff38\001\002\000\026\003\334\007\u0112\033\311" +
    "\034\306\035\317\037\327\043\312\050\304\064\302\074" +
    "\301\001\002\000\032\003\uff33\007\uff33\033\uff33\034\uff33" +
    "\035\uff33\037\uff33\040\uff33\043\uff33\050\uff33\051\uff33\064" +
    "\uff33\074\uff33\001\002\000\032\003\uff34\007\uff34\033\uff34" +
    "\034\uff34\035\uff34\037\uff34\040\uff34\043\uff34\050\uff34\051" +
    "\uff34\064\uff34\074\uff34\001\002\000\032\003\uff31\007\uff31" +
    "\033\uff31\034\uff31\035\uff31\037\uff31\040\uff31\043\uff31\050" +
    "\uff31\051\uff31\064\uff31\074\uff31\001\002\000\004\006\330" +
    "\001\002\000\032\003\uff36\007\uff36\033\uff36\034\uff36\035" +
    "\uff36\037\uff36\040\uff36\043\uff36\050\uff36\051\uff36\064\uff36" +
    "\074\uff36\001\002\000\026\003\uff6d\033\uff6d\034\uff6d\035" +
    "\uff6d\037\uff6d\043\uff6d\050\uff6d\051\uff6d\064\uff6d\074\uff6d" +
    "\001\002\000\026\003\334\033\311\034\306\035\317\037" +
    "\327\043\312\050\304\051\332\064\302\074\301\001\002" +
    "\000\032\003\uff6a\007\uff6a\033\uff6a\034\uff6a\035\uff6a\037" +
    "\uff6a\040\uff6a\043\uff6a\050\uff6a\051\uff6a\064\uff6a\074\uff6a" +
    "\001\002\000\004\060\u0110\001\002\000\032\003\uff69\007" +
    "\uff69\033\uff69\034\uff69\035\uff69\037\uff69\040\uff69\043\uff69" +
    "\050\uff69\051\uff69\064\uff69\074\uff69\001\002\000\022\023" +
    "\341\024\350\025\343\026\347\027\345\030\344\034\346" +
    "\060\342\001\002\000\030\003\334\007\337\033\311\034" +
    "\306\035\317\037\327\043\312\050\304\051\332\064\302" +
    "\074\301\001\002\000\032\003\uff68\007\uff68\033\uff68\034" +
    "\uff68\035\uff68\037\uff68\040\uff68\043\uff68\050\uff68\051\uff68" +
    "\064\uff68\074\uff68\001\002\000\010\004\uff79\042\uff79\066" +
    "\uff79\001\002\000\032\003\uff67\007\uff67\033\uff67\034\uff67" +
    "\035\uff67\037\uff67\040\uff67\043\uff67\050\uff67\051\uff67\064" +
    "\uff67\074\uff67\001\002\000\024\004\053\013\032\063\047" +
    "\067\052\070\027\071\050\072\046\073\040\074\030\001" +
    "\002\000\046\003\uffcd\007\uffcd\024\uffcd\025\uffcd\026\uffcd" +
    "\027\uffcd\030\uffcd\031\uffcd\033\uffcd\034\uffcd\035\uffcd\037" +
    "\uffcd\040\uffcd\043\uffcd\050\uffcd\051\uffcd\064\uffcd\074\uffcd" +
    "\001\002\000\004\074\u010c\001\002\000\004\074\u010a\001" +
    "\002\000\004\074\377\001\002\000\004\074\375\001\002" +
    "\000\004\074\373\001\002\000\004\074\351\001\002\000" +
    "\006\011\353\060\352\001\002\000\046\003\uffbd\007\uffbd" +
    "\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\033" +
    "\uffbd\034\uffbd\035\uffbd\037\uffbd\040\uffbd\043\uffbd\050\uffbd" +
    "\051\uffbd\064\uffbd\074\uffbd\001\002\000\004\067\354\001" +
    "\002\000\004\010\355\001\002\000\006\023\356\060\357" +
    "\001\002\000\004\006\360\001\002\000\032\003\uffad\007" +
    "\uffad\033\uffad\034\uffad\035\uffad\037\uffad\040\uffad\043\uffad" +
    "\050\uffad\051\uffad\064\uffad\074\uffad\001\002\000\010\067" +
    "\364\072\362\074\361\001\002\000\006\007\uff8c\036\uff8c" +
    "\001\002\000\006\007\uff8d\036\uff8d\001\002\000\006\007" +
    "\366\036\365\001\002\000\006\007\uff8e\036\uff8e\001\002" +
    "\000\010\067\372\072\371\074\370\001\002\000\004\060" +
    "\367\001\002\000\032\003\uff9d\007\uff9d\033\uff9d\034\uff9d" +
    "\035\uff9d\037\uff9d\040\uff9d\043\uff9d\050\uff9d\051\uff9d\064" +
    "\uff9d\074\uff9d\001\002\000\006\007\uff89\036\uff89\001\002" +
    "\000\006\007\uff8a\036\uff8a\001\002\000\006\007\uff8b\036" +
    "\uff8b\001\002\000\004\060\374\001\002\000\046\003\uffbb" +
    "\007\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031" +
    "\uffbb\033\uffbb\034\uffbb\035\uffbb\037\uffbb\040\uffbb\043\uffbb" +
    "\050\uffbb\051\uffbb\064\uffbb\074\uffbb\001\002\000\004\060" +
    "\376\001\002\000\032\003\uff83\007\uff83\033\uff83\034\uff83" +
    "\035\uff83\037\uff83\040\uff83\043\uff83\050\uff83\051\uff83\064" +
    "\uff83\074\uff83\001\002\000\006\011\u0101\060\u0100\001\002" +
    "\000\046\003\uffba\007\uffba\024\uffba\025\uffba\026\uffba\027" +
    "\uffba\030\uffba\031\uffba\033\uffba\034\uffba\035\uffba\037\uffba" +
    "\040\uffba\043\uffba\050\uffba\051\uffba\064\uffba\074\uffba\001" +
    "\002\000\004\067\u0102\001\002\000\004\010\u0103\001\002" +
    "\000\006\023\u0104\060\u0105\001\002\000\004\006\u0106\001" +
    "\002\000\032\003\uffa5\007\uffa5\033\uffa5\034\uffa5\035\uffa5" +
    "\037\uffa5\040\uffa5\043\uffa5\050\uffa5\051\uffa5\064\uffa5\074" +
    "\uffa5\001\002\000\010\067\364\072\362\074\361\001\002" +
    "\000\006\007\u0108\036\365\001\002\000\004\060\u0109\001" +
    "\002\000\032\003\uff94\007\uff94\033\uff94\034\uff94\035\uff94" +
    "\037\uff94\040\uff94\043\uff94\050\uff94\051\uff94\064\uff94\074" +
    "\uff94\001\002\000\004\060\u010b\001\002\000\046\003\uffb9" +
    "\007\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031" +
    "\uffb9\033\uffb9\034\uffb9\035\uffb9\037\uffb9\040\uffb9\043\uffb9" +
    "\050\uffb9\051\uffb9\064\uffb9\074\uffb9\001\002\000\004\060" +
    "\u010d\001\002\000\046\003\uffbc\007\uffbc\024\uffbc\025\uffbc" +
    "\026\uffbc\027\uffbc\030\uffbc\031\uffbc\033\uffbc\034\uffbc\035" +
    "\uffbc\037\uffbc\040\uffbc\043\uffbc\050\uffbc\051\uffbc\064\uffbc" +
    "\074\uffbc\001\002\000\004\060\u010f\001\002\000\034\003" +
    "\uffb1\007\uffb1\033\uffb1\034\uffb1\035\uffb1\037\uffb1\040\uffb1" +
    "\043\uffb1\044\uffb1\050\uffb1\051\uffb1\064\uffb1\074\uffb1\001" +
    "\002\000\032\003\uff66\007\uff66\033\uff66\034\uff66\035\uff66" +
    "\037\uff66\040\uff66\043\uff66\050\uff66\051\uff66\064\uff66\074" +
    "\uff66\001\002\000\026\003\uff3b\007\uff3b\033\uff3b\034\uff3b" +
    "\035\uff3b\037\uff3b\043\uff3b\050\uff3b\064\uff3b\074\uff3b\001" +
    "\002\000\020\002\uff3f\024\uff3f\025\uff3f\026\uff3f\027\uff3f" +
    "\030\uff3f\031\uff3f\001\002\000\004\060\u0120\001\002\000" +
    "\004\060\u011f\001\002\000\004\060\u011e\001\002\000\004" +
    "\060\u011d\001\002\000\004\060\u011c\001\002\000\004\060" +
    "\u011b\001\002\000\004\060\u011a\001\002\000\032\003\uff80" +
    "\007\uff80\033\uff80\034\uff80\035\uff80\037\uff80\040\uff80\043" +
    "\uff80\050\uff80\051\uff80\064\uff80\074\uff80\001\002\000\032" +
    "\003\uff7c\007\uff7c\033\uff7c\034\uff7c\035\uff7c\037\uff7c\040" +
    "\uff7c\043\uff7c\050\uff7c\051\uff7c\064\uff7c\074\uff7c\001\002" +
    "\000\032\003\uff7f\007\uff7f\033\uff7f\034\uff7f\035\uff7f\037" +
    "\uff7f\040\uff7f\043\uff7f\050\uff7f\051\uff7f\064\uff7f\074\uff7f" +
    "\001\002\000\032\003\uff7d\007\uff7d\033\uff7d\034\uff7d\035" +
    "\uff7d\037\uff7d\040\uff7d\043\uff7d\050\uff7d\051\uff7d\064\uff7d" +
    "\074\uff7d\001\002\000\032\003\uff7b\007\uff7b\033\uff7b\034" +
    "\uff7b\035\uff7b\037\uff7b\040\uff7b\043\uff7b\050\uff7b\051\uff7b" +
    "\064\uff7b\074\uff7b\001\002\000\032\003\uff81\007\uff81\033" +
    "\uff81\034\uff81\035\uff81\037\uff81\040\uff81\043\uff81\050\uff81" +
    "\051\uff81\064\uff81\074\uff81\001\002\000\032\003\uff7e\007" +
    "\uff7e\033\uff7e\034\uff7e\035\uff7e\037\uff7e\040\uff7e\043\uff7e" +
    "\050\uff7e\051\uff7e\064\uff7e\074\uff7e\001\002\000\024\023" +
    "\341\024\350\025\343\026\347\027\345\030\344\034\346" +
    "\040\u012a\060\342\001\002\000\030\003\334\033\311\034" +
    "\306\035\317\037\327\040\u0123\043\312\050\304\051\332" +
    "\064\302\074\301\001\002\000\004\041\u0124\001\002\000" +
    "\020\004\053\013\032\063\047\067\052\070\027\071\050" +
    "\074\030\001\002\000\006\060\u0126\062\056\001\002\000" +
    "\004\042\u0127\001\002\000\004\037\u0128\001\002\000\004" +
    "\060\u0129\001\002\000\032\003\uff6c\007\uff6c\033\uff6c\034" +
    "\uff6c\035\uff6c\037\uff6c\040\uff6c\043\uff6c\050\uff6c\051\uff6c" +
    "\064\uff6c\074\uff6c\001\002\000\004\041\u012b\001\002\000" +
    "\004\037\u012c\001\002\000\004\060\u012d\001\002\000\032" +
    "\003\uff6b\007\uff6b\033\uff6b\034\uff6b\035\uff6b\037\uff6b\040" +
    "\uff6b\043\uff6b\050\uff6b\051\uff6b\064\uff6b\074\uff6b\001\002" +
    "\000\020\002\uff3d\024\uff3d\025\uff3d\026\uff3d\027\uff3d\030" +
    "\uff3d\031\uff3d\001\002\000\004\044\u0138\001\002\000\004" +
    "\023\341\001\002\000\004\023\u0132\001\002\000\026\003" +
    "\u0134\004\053\013\032\063\047\067\052\070\027\071\050" +
    "\072\046\073\040\074\030\001\002\000\006\003\u0137\060" +
    "\u0136\001\002\000\004\060\u0135\001\002\000\034\003\uffb2" +
    "\007\uffb2\033\uffb2\034\uffb2\035\uffb2\037\uffb2\040\uffb2\043" +
    "\uffb2\044\uffb2\050\uffb2\051\uffb2\064\uffb2\074\uffb2\001\002" +
    "\000\034\003\uffb3\007\uffb3\033\uffb3\034\uffb3\035\uffb3\037" +
    "\uffb3\040\uffb3\043\uffb3\044\uffb3\050\uffb3\051\uffb3\064\uffb3" +
    "\074\uffb3\001\002\000\034\003\uffb0\007\uffb0\033\uffb0\034" +
    "\uffb0\035\uffb0\037\uffb0\040\uffb0\043\uffb0\044\uffb0\050\uffb0" +
    "\051\uffb0\064\uffb0\074\uffb0\001\002\000\006\067\u013a\070" +
    "\u0139\001\002\000\006\045\u0142\046\u0141\001\002\000\006" +
    "\045\u013c\046\u013b\001\002\000\004\067\u013f\001\002\000" +
    "\004\067\u013d\001\002\000\004\047\u013e\001\002\000\004" +
    "\006\uff65\001\002\000\004\047\u0140\001\002\000\004\006" +
    "\uff64\001\002\000\004\070\u0145\001\002\000\004\070\u0143" +
    "\001\002\000\004\047\u0144\001\002\000\004\006\uff63\001" +
    "\002\000\004\047\u0146\001\002\000\004\006\uff62\001\002" +
    "\000\004\074\u01ad\001\002\000\006\003\u017c\074\u017d\001" +
    "\002\000\006\003\u014a\074\u014b\001\002\000\006\011\u0173" +
    "\060\023\001\002\000\012\003\u014c\011\u014d\023\024\060" +
    "\025\001\002\000\036\003\uffc6\007\uffc6\033\uffc6\034\uffc6" +
    "\035\uffc6\037\uffc6\040\uffc6\043\uffc6\050\uffc6\051\uffc6\060" +
    "\u016a\064\uffc6\067\u016b\074\uffc6\001\002\000\006\003\u014e" +
    "\067\u014f\001\002\000\004\010\u0163\001\002\000\006\003" +
    "\u0151\010\u0150\001\002\000\010\003\u015a\023\u0158\060\u0159" +
    "\001\002\000\006\023\u0152\060\u0153\001\002\000\004\006" +
    "\u0154\001\002\000\032\003\uffa9\007\uffa9\033\uffa9\034\uffa9" +
    "\035\uffa9\037\uffa9\040\uffa9\043\uffa9\050\uffa9\051\uffa9\064" +
    "\uffa9\074\uffa9\001\002\000\010\067\364\072\362\074\361" +
    "\001\002\000\006\007\u0156\036\365\001\002\000\004\060" +
    "\u0157\001\002\000\032\003\uff99\007\uff99\033\uff99\034\uff99" +
    "\035\uff99\037\uff99\040\uff99\043\uff99\050\uff99\051\uff99\064" +
    "\uff99\074\uff99\001\002\000\004\006\u015b\001\002\000\032" +
    "\003\uffaf\007\uffaf\033\uffaf\034\uffaf\035\uffaf\037\uffaf\040" +
    "\uffaf\043\uffaf\050\uffaf\051\uffaf\064\uffaf\074\uffaf\001\002" +
    "\000\032\003\uffa7\007\uffa7\033\uffa7\034\uffa7\035\uffa7\037" +
    "\uffa7\040\uffa7\043\uffa7\050\uffa7\051\uffa7\064\uffa7\074\uffa7" +
    "\001\002\000\012\003\u015c\067\364\072\362\074\361\001" +
    "\002\000\004\007\u0161\001\002\000\006\007\u015e\036\365" +
    "\001\002\000\006\003\u0160\060\u015f\001\002\000\032\003" +
    "\uff9e\007\uff9e\033\uff9e\034\uff9e\035\uff9e\037\uff9e\040\uff9e" +
    "\043\uff9e\050\uff9e\051\uff9e\064\uff9e\074\uff9e\001\002\000" +
    "\032\003\uff97\007\uff97\033\uff97\034\uff97\035\uff97\037\uff97" +
    "\040\uff97\043\uff97\050\uff97\051\uff97\064\uff97\074\uff97\001" +
    "\002\000\004\060\u0162\001\002\000\032\003\uff96\007\uff96" +
    "\033\uff96\034\uff96\035\uff96\037\uff96\040\uff96\043\uff96\050" +
    "\uff96\051\uff96\064\uff96\074\uff96\001\002\000\006\023\u0164" +
    "\060\u0165\001\002\000\004\006\u0166\001\002\000\032\003" +
    "\uffaa\007\uffaa\033\uffaa\034\uffaa\035\uffaa\037\uffaa\040\uffaa" +
    "\043\uffaa\050\uffaa\051\uffaa\064\uffaa\074\uffaa\001\002\000" +
    "\010\067\364\072\362\074\361\001\002\000\006\007\u0168" +
    "\036\365\001\002\000\004\060\u0169\001\002\000\032\003" +
    "\uff9a\007\uff9a\033\uff9a\034\uff9a\035\uff9a\037\uff9a\040\uff9a" +
    "\043\uff9a\050\uff9a\051\uff9a\064\uff9a\074\uff9a\001\002\000" +
    "\032\003\uffae\007\uffae\033\uffae\034\uffae\035\uffae\037\uffae" +
    "\040\uffae\043\uffae\050\uffae\051\uffae\064\uffae\074\uffae\001" +
    "\002\000\004\010\u016c\001\002\000\006\023\u016d\060\u016e" +
    "\001\002\000\004\006\u016f\001\002\000\032\003\uffa8\007" +
    "\uffa8\033\uffa8\034\uffa8\035\uffa8\037\uffa8\040\uffa8\043\uffa8" +
    "\050\uffa8\051\uffa8\064\uffa8\074\uffa8\001\002\000\010\067" +
    "\364\072\362\074\361\001\002\000\006\007\u0171\036\365" +
    "\001\002\000\004\060\u0172\001\002\000\032\003\uff98\007" +
    "\uff98\033\uff98\034\uff98\035\uff98\037\uff98\040\uff98\043\uff98" +
    "\050\uff98\051\uff98\064\uff98\074\uff98\001\002\000\004\067" +
    "\u0174\001\002\000\004\010\u0175\001\002\000\006\023\u0176" +
    "\060\u0177\001\002\000\004\006\u0178\001\002\000\032\003" +
    "\uffab\007\uffab\033\uffab\034\uffab\035\uffab\037\uffab\040\uffab" +
    "\043\uffab\050\uffab\051\uffab\064\uffab\074\uffab\001\002\000" +
    "\010\067\364\072\362\074\361\001\002\000\006\007\u017a" +
    "\036\365\001\002\000\004\060\u017b\001\002\000\032\003" +
    "\uff9b\007\uff9b\033\uff9b\034\uff9b\035\uff9b\037\uff9b\040\uff9b" +
    "\043\uff9b\050\uff9b\051\uff9b\064\uff9b\074\uff9b\001\002\000" +
    "\006\011\u01a4\060\205\001\002\000\012\003\u017e\011\u017f" +
    "\023\206\060\207\001\002\000\006\060\u019b\067\u019c\001" +
    "\002\000\006\003\u0180\067\u0181\001\002\000\004\010\u0194" +
    "\001\002\000\006\003\u0183\010\u0182\001\002\000\010\003" +
    "\u018c\023\u018a\060\u018b\001\002\000\006\023\u0184\060\u0185" +
    "\001\002\000\004\006\u0186\001\002\000\032\003\uffa2\007" +
    "\uffa2\033\uffa2\034\uffa2\035\uffa2\037\uffa2\040\uffa2\043\uffa2" +
    "\050\uffa2\051\uffa2\064\uffa2\074\uffa2\001\002\000\010\067" +
    "\364\072\362\074\361\001\002\000\006\007\u0188\036\365" +
    "\001\002\000\004\060\u0189\001\002\000\032\003\uff91\007" +
    "\uff91\033\uff91\034\uff91\035\uff91\037\uff91\040\uff91\043\uff91" +
    "\050\uff91\051\uff91\064\uff91\074\uff91\001\002\000\004\006" +
    "\u018d\001\002\000\032\003\uffa6\007\uffa6\033\uffa6\034\uffa6" +
    "\035\uffa6\037\uffa6\040\uffa6\043\uffa6\050\uffa6\051\uffa6\064" +
    "\uffa6\074\uffa6\001\002\000\032\003\uffa0\007\uffa0\033\uffa0" +
    "\034\uffa0\035\uffa0\037\uffa0\040\uffa0\043\uffa0\050\uffa0\051" +
    "\uffa0\064\uffa0\074\uffa0\001\002\000\012\003\u018e\067\364" +
    "\072\362\074\361\001\002\000\004\007\u0192\001\002\000" +
    "\006\007\u0190\036\365\001\002\000\004\060\u0191\001\002" +
    "\000\032\003\uff95\007\uff95\033\uff95\034\uff95\035\uff95\037" +
    "\uff95\040\uff95\043\uff95\050\uff95\051\uff95\064\uff95\074\uff95" +
    "\001\002\000\004\060\u0193\001\002\000\032\003\uff8f\007" +
    "\uff8f\033\uff8f\034\uff8f\035\uff8f\037\uff8f\040\uff8f\043\uff8f" +
    "\050\uff8f\051\uff8f\064\uff8f\074\uff8f\001\002\000\006\023" +
    "\u0195\060\u0196\001\002\000\004\006\u0197\001\002\000\032" +
    "\003\uffa3\007\uffa3\033\uffa3\034\uffa3\035\uffa3\037\uffa3\040" +
    "\uffa3\043\uffa3\050\uffa3\051\uffa3\064\uffa3\074\uffa3\001\002" +
    "\000\010\067\364\072\362\074\361\001\002\000\006\007" +
    "\u0199\036\365\001\002\000\004\060\u019a\001\002\000\032" +
    "\003\uff92\007\uff92\033\uff92\034\uff92\035\uff92\037\uff92\040" +
    "\uff92\043\uff92\050\uff92\051\uff92\064\uff92\074\uff92\001\002" +
    "\000\032\003\uff9f\007\uff9f\033\uff9f\034\uff9f\035\uff9f\037" +
    "\uff9f\040\uff9f\043\uff9f\050\uff9f\051\uff9f\064\uff9f\074\uff9f" +
    "\001\002\000\004\010\u019d\001\002\000\006\023\u019e\060" +
    "\u019f\001\002\000\004\006\u01a0\001\002\000\032\003\uffa1" +
    "\007\uffa1\033\uffa1\034\uffa1\035\uffa1\037\uffa1\040\uffa1\043" +
    "\uffa1\050\uffa1\051\uffa1\064\uffa1\074\uffa1\001\002\000\010" +
    "\067\364\072\362\074\361\001\002\000\006\007\u01a2\036" +
    "\365\001\002\000\004\060\u01a3\001\002\000\032\003\uff90" +
    "\007\uff90\033\uff90\034\uff90\035\uff90\037\uff90\040\uff90\043" +
    "\uff90\050\uff90\051\uff90\064\uff90\074\uff90\001\002\000\004" +
    "\067\u01a5\001\002\000\004\010\u01a6\001\002\000\006\023" +
    "\u01a7\060\u01a8\001\002\000\004\006\u01a9\001\002\000\032" +
    "\003\uffa4\007\uffa4\033\uffa4\034\uffa4\035\uffa4\037\uffa4\040" +
    "\uffa4\043\uffa4\050\uffa4\051\uffa4\064\uffa4\074\uffa4\001\002" +
    "\000\010\067\364\072\362\074\361\001\002\000\006\007" +
    "\u01ab\036\365\001\002\000\004\060\u01ac\001\002\000\032" +
    "\003\uff93\007\uff93\033\uff93\034\uff93\035\uff93\037\uff93\040" +
    "\uff93\043\uff93\050\uff93\051\uff93\064\uff93\074\uff93\001\002" +
    "\000\010\011\u01ae\023\216\060\217\001\002\000\004\067" +
    "\u01af\001\002\000\004\010\u01b0\001\002\000\006\023\u01b1" +
    "\060\u01b2\001\002\000\004\006\u01b3\001\002\000\032\003" +
    "\uffac\007\uffac\033\uffac\034\uffac\035\uffac\037\uffac\040\uffac" +
    "\043\uffac\050\uffac\051\uffac\064\uffac\074\uffac\001\002\000" +
    "\010\067\364\072\362\074\361\001\002\000\006\007\u01b5" +
    "\036\365\001\002\000\004\060\u01b6\001\002\000\032\003" +
    "\uff9c\007\uff9c\033\uff9c\034\uff9c\035\uff9c\037\uff9c\040\uff9c" +
    "\043\uff9c\050\uff9c\051\uff9c\064\uff9c\074\uff9c\001\002\000" +
    "\026\003\334\033\311\034\306\035\317\037\327\043\312" +
    "\050\304\051\332\064\302\074\301\001\002\000\030\003" +
    "\334\007\u01b9\033\311\034\306\035\317\037\327\043\312" +
    "\050\304\051\332\064\302\074\301\001\002\000\032\003" +
    "\uff61\007\uff61\033\uff61\034\uff61\035\uff61\037\uff61\040\uff61" +
    "\043\uff61\050\uff61\051\uff61\064\uff61\074\uff61\001\002\000" +
    "\006\003\u01be\060\u01bd\001\002\000\004\060\u01bc\001\002" +
    "\000\032\003\uff84\007\uff84\033\uff84\034\uff84\035\uff84\037" +
    "\uff84\040\uff84\043\uff84\050\uff84\051\uff84\064\uff84\074\uff84" +
    "\001\002\000\032\003\uff85\007\uff85\033\uff85\034\uff85\035" +
    "\uff85\037\uff85\040\uff85\043\uff85\050\uff85\051\uff85\064\uff85" +
    "\074\uff85\001\002\000\032\003\uff82\007\uff82\033\uff82\034" +
    "\uff82\035\uff82\037\uff82\040\uff82\043\uff82\050\uff82\051\uff82" +
    "\064\uff82\074\uff82\001\002\000\020\004\053\013\032\063" +
    "\047\067\052\070\027\071\050\074\030\001\002\000\010" +
    "\004\uff73\042\uff73\066\uff73\001\002\000\004\006\u01d9\001" +
    "\002\000\004\064\u01d7\001\002\000\010\004\u01bf\042\u01d0" +
    "\066\u01c6\001\002\000\004\006\u01cc\001\002\000\004\042" +
    "\u01c9\001\002\000\004\013\u01c7\001\002\000\004\052\u01c8" +
    "\001\002\000\004\006\uff6f\001\002\000\004\064\u01ca\001" +
    "\002\000\004\060\u01cb\001\002\000\032\003\uff76\007\uff76" +
    "\033\uff76\034\uff76\035\uff76\037\uff76\040\uff76\043\uff76\050" +
    "\uff76\051\uff76\064\uff76\074\uff76\001\002\000\026\003\334" +
    "\033\311\034\306\035\317\037\327\043\312\050\304\051" +
    "\332\064\302\074\301\001\002\000\030\003\334\007\u01ce" +
    "\033\311\034\306\035\317\037\327\043\312\050\304\051" +
    "\332\064\302\074\301\001\002\000\004\042\uff6e\001\002" +
    "\000\010\004\uff72\042\uff72\066\uff72\001\002\000\004\064" +
    "\u01d5\001\002\000\004\042\u01d2\001\002\000\004\064\u01d3" +
    "\001\002\000\004\060\u01d4\001\002\000\032\003\uff75\007" +
    "\uff75\033\uff75\034\uff75\035\uff75\037\uff75\040\uff75\043\uff75" +
    "\050\uff75\051\uff75\064\uff75\074\uff75\001\002\000\004\060" +
    "\u01d6\001\002\000\032\003\uff77\007\uff77\033\uff77\034\uff77" +
    "\035\uff77\037\uff77\040\uff77\043\uff77\050\uff77\051\uff77\064" +
    "\uff77\074\uff77\001\002\000\004\060\u01d8\001\002\000\032" +
    "\003\uff78\007\uff78\033\uff78\034\uff78\035\uff78\037\uff78\040" +
    "\uff78\043\uff78\050\uff78\051\uff78\064\uff78\074\uff78\001\002" +
    "\000\026\003\334\033\311\034\306\035\317\037\327\043" +
    "\312\050\304\051\332\064\302\074\301\001\002\000\030" +
    "\003\334\007\u01db\033\311\034\306\035\317\037\327\043" +
    "\312\050\304\051\332\064\302\074\301\001\002\000\010" +
    "\004\uff70\042\uff70\066\uff70\001\002\000\006\005\u01dd\062" +
    "\056\001\002\000\004\013\u01de\001\002\000\004\052\u01df" +
    "\001\002\000\004\006\uff71\001\002\000\032\003\uff50\007" +
    "\uff50\033\uff50\034\uff50\035\uff50\037\uff50\040\uff50\043\uff50" +
    "\050\uff50\051\uff50\064\uff50\074\uff50\001\002\000\006\060" +
    "\u01e2\062\056\001\002\000\032\003\uff4f\007\uff4f\033\uff4f" +
    "\034\uff4f\035\uff4f\037\uff4f\040\uff4f\043\uff4f\050\uff4f\051" +
    "\uff4f\064\uff4f\074\uff4f\001\002\000\004\004\u01e4\001\002" +
    "\000\022\003\u01e5\004\053\013\032\063\047\067\052\070" +
    "\027\071\050\074\030\001\002\000\004\005\u01ea\001\002" +
    "\000\006\005\u01e7\062\056\001\002\000\004\013\u01e8\001" +
    "\002\000\004\052\u01e9\001\002\000\004\006\uff7a\001\002" +
    "\000\004\013\u01eb\001\002\000\004\052\u01ec\001\002\000" +
    "\004\006\u01ed\001\002\000\026\003\334\033\311\034\306" +
    "\035\317\037\327\043\312\050\304\051\332\064\302\074" +
    "\301\001\002\000\030\003\334\007\u01ef\033\311\034\306" +
    "\035\317\037\327\043\312\050\304\051\332\064\302\074" +
    "\301\001\002\000\004\042\u01f0\001\002\000\004\064\u01f1" +
    "\001\002\000\004\060\u01f2\001\002\000\032\003\uff74\007" +
    "\uff74\033\uff74\034\uff74\035\uff74\037\uff74\040\uff74\043\uff74" +
    "\050\uff74\051\uff74\064\uff74\074\uff74\001\002\000\020\004" +
    "\053\013\032\063\047\067\052\070\027\071\050\074\030" +
    "\001\002\000\010\010\u01f5\012\100\013\107\001\002\000" +
    "\004\023\u01f6\001\002\000\022\004\053\013\032\063\047" +
    "\067\052\070\027\071\050\072\u01f8\074\030\001\002\000" +
    "\010\012\100\013\107\060\u01fa\001\002\000\004\060\u01f9" +
    "\001\002\000\032\003\uff87\007\uff87\033\uff87\034\uff87\035" +
    "\uff87\037\uff87\040\uff87\043\uff87\050\uff87\051\uff87\064\uff87" +
    "\074\uff87\001\002\000\032\003\uff88\007\uff88\033\uff88\034" +
    "\uff88\035\uff88\037\uff88\040\uff88\043\uff88\050\uff88\051\uff88" +
    "\064\uff88\074\uff88\001\002\000\006\005\uff53\036\uff53\001" +
    "\002\000\006\005\uff55\036\uff55\001\002\000\016\024\uff5b" +
    "\025\uff5b\026\uff5b\027\uff5b\030\uff5b\031\uff5b\001\002\000" +
    "\004\006\274\001\002\000\016\024\uff5a\025\uff5a\026\uff5a" +
    "\027\uff5a\030\uff5a\031\uff5a\001\002\000\014\024\270\025" +
    "\264\026\271\027\262\030\263\001\002\000\004\005\uff58" +
    "\001\002\000\006\005\uff57\036\u0200\001\002\000\004\005" +
    "\uff56\001\002\000\006\005\uff54\036\uff54\001\002\000\006" +
    "\005\uff51\036\uff51\001\002\000\006\005\uff52\036\uff52\001" +
    "\002\000\004\004\uff5e\001\002\000\004\004\uff60\001\002" +
    "\000\004\004\u020a\001\002\000\004\005\u020b\001\002\000" +
    "\004\006\uff2e\001\002\000\004\004\uff5f\001\002\000\004" +
    "\002\uff2d\001\002\000\004\004\uff5c\001\002\000\004\004" +
    "\uff5d\001\002\000\004\074\u0213\001\002\000\004\074\u0212" +
    "\001\002\000\004\060\352\001\002\000\004\060\u0100\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0211\000\006\062\003\063\004\001\001\000\006\015" +
    "\010\050\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\046\253\047\257\060\256\061" +
    "\250\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\002\030\003" +
    "\036\004\041\005\043\006\034\007\040\010\033\011\035" +
    "\012\054\013\042\014\044\021\053\055\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\002\030\003\036\004" +
    "\041\005\043\006\034\007\040\010\033\011\035\012\064" +
    "\013\042\021\053\055\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\002\030\003\036" +
    "\004\041\005\043\006\034\007\040\010\033\011\035\012" +
    "\061\013\042\021\053\055\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\002\030\003\036\004\041\005" +
    "\043\006\034\007\040\010\033\011\056\013\042\021\053" +
    "\055\032\001\001\000\002\001\001\000\026\002\030\003" +
    "\036\004\041\005\043\006\034\007\040\010\033\013\060" +
    "\021\053\055\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\002\030\003" +
    "\036\006\076\007\040\010\033\021\053\055\032\001\001" +
    "\000\020\002\030\003\036\006\075\007\040\010\033\021" +
    "\053\055\032\001\001\000\020\002\030\003\036\006\074" +
    "\007\040\010\033\021\053\055\032\001\001\000\020\002" +
    "\030\003\036\006\073\007\040\010\033\021\053\055\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\002\030\003\036\005\117" +
    "\006\034\007\040\010\033\021\053\055\032\001\001\000" +
    "\024\002\030\003\036\004\116\005\043\006\034\007\040" +
    "\010\033\021\053\055\032\001\001\000\024\002\030\003" +
    "\036\004\115\005\043\006\034\007\040\010\033\021\053" +
    "\055\032\001\001\000\024\002\030\003\036\004\114\005" +
    "\043\006\034\007\040\010\033\021\053\055\032\001\001" +
    "\000\024\002\030\003\036\004\113\005\043\006\034\007" +
    "\040\010\033\021\053\055\032\001\001\000\024\002\030" +
    "\003\036\004\112\005\043\006\034\007\040\010\033\021" +
    "\053\055\032\001\001\000\024\002\030\003\036\004\111" +
    "\005\043\006\034\007\040\010\033\021\053\055\032\001" +
    "\001\000\022\002\030\003\036\005\107\006\034\007\040" +
    "\010\033\021\053\055\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\002\030" +
    "\003\036\006\122\007\040\010\033\021\053\055\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\136\056\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\002\030\003\036\004\131\005\043" +
    "\006\034\007\040\010\033\021\053\055\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\057\165\001\001\000\004\057\164\001\001\000\004\057" +
    "\163\001\001\000\004\057\162\001\001\000\004\057\161" +
    "\001\001\000\002\001\001\000\004\057\144\001\001\000" +
    "\004\021\147\001\001\000\002\001\001\000\004\057\160" +
    "\001\001\000\004\057\157\001\001\000\004\057\156\001" +
    "\001\000\004\057\155\001\001\000\004\057\154\001\001" +
    "\000\004\057\153\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\002\030\003\036\004\041\005\043\006\034" +
    "\007\040\010\033\011\035\012\054\013\042\014\175\021" +
    "\053\055\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\002\030\003\036\004" +
    "\041\005\043\006\034\007\040\010\033\011\035\012\054" +
    "\013\042\014\207\021\053\055\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\002\030\003\036\004\041\005\043\006\034\007\040" +
    "\010\033\011\035\012\054\013\042\014\217\021\053\055" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\002" +
    "\030\003\036\004\041\005\043\006\034\007\040\010\033" +
    "\011\035\012\054\013\042\014\225\021\053\055\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\002\030\003\036\004\041\005\043\006\034\007\040\010" +
    "\033\011\035\012\054\013\042\014\240\021\053\055\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\u020c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\051\265\052\264\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\053\u0200\001\001\000\002" +
    "\001\001\000\004\024\u01fc\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\274\001\001" +
    "\000\042\015\275\016\313\017\317\020\277\022\276\023" +
    "\320\025\325\026\307\027\321\030\315\031\314\032\306" +
    "\035\322\036\324\037\304\054\323\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\002\030\003\036\004\041\005\043\006\034\007\040" +
    "\010\033\011\035\012\u01e0\013\042\021\053\055\032\001" +
    "\001\000\014\040\u01c2\041\u01bf\042\u01c0\043\u01c3\044\u01c4" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\u012e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\015" +
    "\275\016\313\017\317\020\277\022\330\025\325\026\307" +
    "\027\321\030\315\031\314\032\306\033\u0121\034\332\035" +
    "\322\036\324\037\304\054\323\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\015\275\016\313\017\317\020" +
    "\277\022\u0110\025\325\026\307\027\321\030\315\031\314" +
    "\032\306\035\322\036\324\037\304\054\323\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\015" +
    "\275\016\313\017\317\020\277\022\330\025\325\026\307" +
    "\027\321\030\315\031\314\032\306\033\334\034\332\035" +
    "\322\036\324\037\304\054\323\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\015\275\016\313\017\317\020\277\022\335\025\325" +
    "\026\307\027\321\030\315\031\314\032\306\034\337\035" +
    "\322\036\324\037\304\054\323\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\002\030\003" +
    "\036\004\041\005\043\006\034\007\040\010\033\011\035" +
    "\012\054\013\042\014\u010d\021\053\055\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\362\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\u0106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\015\275\016\313\017\317\020\277\022\335\025\325" +
    "\026\307\027\321\030\315\031\314\032\306\034\337\035" +
    "\322\036\324\037\304\054\323\001\001\000\002\001\001" +
    "\000\032\002\030\003\036\004\041\005\043\006\034\007" +
    "\040\010\033\011\035\012\u0124\013\042\021\053\055\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\002\030\003\036\004\041\005\043\006" +
    "\034\007\040\010\033\011\035\012\054\013\042\014\u0132" +
    "\021\053\055\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\u0154\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\u015c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\u0166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\045\u016f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\u0178\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\u0186\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\u018e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\u0197\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\u01a0\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\u01a9\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\045\u01b3\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\015" +
    "\275\016\313\017\317\020\277\022\330\025\325\026\307" +
    "\027\321\030\315\031\314\032\306\033\u01b7\034\332\035" +
    "\322\036\324\037\304\054\323\001\001\000\042\015\275" +
    "\016\313\017\317\020\277\022\335\025\325\026\307\027" +
    "\321\030\315\031\314\032\306\034\337\035\322\036\324" +
    "\037\304\054\323\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\002\030\003\036\004\041\005" +
    "\043\006\034\007\040\010\033\011\035\012\u01db\013\042" +
    "\021\053\055\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\041\u01ce\042\u01c0\043\u01c3" +
    "\044\u01d0\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\015" +
    "\275\016\313\017\317\020\277\022\330\025\325\026\307" +
    "\027\321\030\315\031\314\032\306\033\u01cc\034\332\035" +
    "\322\036\324\037\304\054\323\001\001\000\042\015\275" +
    "\016\313\017\317\020\277\022\335\025\325\026\307\027" +
    "\321\030\315\031\314\032\306\034\337\035\322\036\324" +
    "\037\304\054\323\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\015\275\016\313\017\317\020\277\022\330\025\325\026" +
    "\307\027\321\030\315\031\314\032\306\033\u01d9\034\332" +
    "\035\322\036\324\037\304\054\323\001\001\000\042\015" +
    "\275\016\313\017\317\020\277\022\335\025\325\026\307" +
    "\027\321\030\315\031\314\032\306\034\337\035\322\036" +
    "\324\037\304\054\323\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\002\030\003\036\004\041\005" +
    "\043\006\034\007\040\010\033\011\035\012\u01e5\013\042" +
    "\021\053\055\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\015\275\016\313\017\317\020\277\022\330\025\325" +
    "\026\307\027\321\030\315\031\314\032\306\033\u01ed\034" +
    "\332\035\322\036\324\037\304\054\323\001\001\000\042" +
    "\015\275\016\313\017\317\020\277\022\335\025\325\026" +
    "\307\027\321\030\315\031\314\032\306\034\337\035\322" +
    "\036\324\037\304\054\323\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\002\030\003\036\004\u01f3\005\043\006\034\007\040\010" +
    "\033\021\053\055\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\002\030\003\036\004\u01f6\005\043\006" +
    "\034\007\040\010\033\021\053\055\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\u01fe\001\001\000\002\001\001\000\004\052" +
    "\u0201\001\001\000\002\001\001\000\004\053\u0202\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static int syntaxErrors = 0;
    
    public void syntax_error(Symbol s) {
        syntaxErrors++;
        System.err.println("\n ERROR DE SINTAXIS:");
        System.err.println("   Linea: " + (s.left+1));
        System.err.println("   Token inesperado: " + s.value);
    }
    
    public void report_error(String message, Object info) {
        System.err.println("ERROR: " + message);
    }
    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        System.err.println("\nERROR FATAL: No se puede recuperar del error de sintaxis");
        throw new Exception("Error de sintaxis irrecuperable en linea " + (s.left+1));
    }

    public void sePuedeoNo(){
        int lexerErrors = codigo.Lexer.errorCount; 
        
        if (lexerErrors == 0 && syntaxErrors == 0) {
            System.out.println("La gramatica si puede ser generada");
        }
        else {
            System.out.println("La gramatica no puede ser generada");
            System.out.println("Numero de errores en el lexer: " + lexerErrors); 
            System.out.println("Numero de errores en el parser: " + syntaxErrors);
        }
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

 
    TablaDeSimbolos tablaGlobal = new TablaDeSimbolos("Global"); //
    TablaDeSimbolos tablaActual = tablaGlobal; //Al principio es la global
    int erroresSemanticos = 0;
    public void hola(){
         System.out.println(tablaActual.toString());
    }
    
    //Se crea una nueva tabla de símbolos
    public TablaDeSimbolos crearTablaDeSimbolos(String nombre){
        return new TablaDeSimbolos(nombre);
    }
    
    //Le coloca a la tabla que se pase como parametro la actual como anterior, y coloca la del parámetro de entrada como actual
    public void apilarNuevaTablaDeSimbolos(TablaDeSimbolos pTablaDeSimbolos){
        //La tabla actual la coloco como la anterior de la recibida en la entrada
        pTablaDeSimbolos.setTablaAnterior(tablaActual);
        
        //Coloco la tabla de la entrada como la nueva
        tablaActual = pTablaDeSimbolos;
    }

    //Coloca la tabla anterior a la actual como la nueva tabla actual
    public void desapilarTablaDeSimbolos(){
        System.out.println("Voy a desapilar tabla: " + tablaActual.getNombre());
        TablaDeSimbolos tablaAnterior = tablaActual.getTablaAnterior();
        if(tablaAnterior != null){
            
            tablaActual = tablaAnterior; //Con esto ya no hay referencia a la primera tabla de la pila
            System.out.println("La tabla actual es ahora: " + tablaActual.getNombre());
        }else{
            System.out.println("Error: Se está intentando desapilar la tabla Global");
        }
    }

    //Añade a la tabla actual el símbolo indicado
    public void agregarSimbolo(String pTipo, String pSimbolo){
        System.out.println("Se agrega el simbolo " + pSimbolo + " a la tabla "+tablaActual.getNombre() + "con el tipo "+ pTipo);
        tablaActual.agregarSimbolo(new Simbolo(pSimbolo, pTipo));
    }
    
    //Busca en la jerarquía de tablas el símbolo de la entrada y lo retorno si existiera
    public Simbolo buscarSimbolo(String pSimbolo){
        return tablaActual.obtenerSimbolo(pSimbolo);
    }

    //Reporta el error de que ese id no existe en la tabla
    public void reportarErrorNoExisteSimbolo(String pSimbolo){
        Simbolo simbolo = buscarSimbolo(pSimbolo);
        if(simbolo == null){
            System.err.println("Error Semantico: El identificador " + pSimbolo + " no ha sido declarado previamente");
            erroresSemanticos++;
        }
    }

    public String verifiacionSemanticaAritmeticaBinaria(String operacion,String tipo1, String tipo2, String linea1, String linea2, String columna1, String columna2){
        boolean tipo1b = true;
        boolean tipo2b = true;

        if(!(tipo1.equals("int") || tipo1.equals("float"))){
            System.err.println(String.format(
                "Error Semantico: El operando izquierdo de la %s en la linea %s columna %s debe ser entero o flotante.", 
                operacion, linea1, columna1
            ));
            erroresSemanticos++;
            tipo1b = false;
        }

        if(!(tipo2.equals("int") || tipo2.equals("float"))){
            System.err.println(String.format(
                "Error Semantico: El operando derecho de la %s en la linea %s columna %s debe ser entero o flotante.",
                operacion, linea2, columna2
            ));
            erroresSemanticos++;
            tipo2b = false;
        }

        if(tipo1b && tipo2b && tipo1.equals(tipo2)){
            return tipo1;
        } else {
            System.err.println(String.format(
                "Error Semantico: Ambos operandos en la %s de la linea %s deben ser enteros o flotantes.",
                operacion, linea1
            ));
            erroresSemanticos++;
            return "null";
        }
    }
    


   

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // unary_negative ::= minus_operator int_literal 
            {
              Object RESULT =null;
		 System.out.println("Negativo entero"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_negative",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // unary_negative ::= minus_operator float_literal 
            {
              Object RESULT =null;
		 System.out.println("Negativo flotante"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_negative",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // postfix_expression ::= identifier increment_operator 
            {
              Object RESULT =null;
		 System.out.println("Incremento (++)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // postfix_expression ::= identifier decrement_operator 
            {
              Object RESULT =null;
		 System.out.println("Decremento (--)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // arithmetic_expression ::= arithmetic_expression plus_operator term 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Suma (+)"); 
                               String[] partesE1 = e1.toString().split("::");
                                String[] partesE2 = e2.toString().split("::");
                            String verificacion = verifiacionSemanticaAritmeticaBinaria("suma", partesE1[1], partesE2[1], partesE1[2], partesE2[2], partesE1[3], partesE2[3]);
       
                            RESULT = "ResultadoSuma::" + verificacion + "::" + partesE1[2] + "::" + partesE1[3];
                            
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // arithmetic_expression ::= arithmetic_expression plus_operator error 
            {
              Object RESULT =null;
		 System.err.println("Error:En la expresión aritmética después de +"); RESULT = "null::null::-1::-1";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // arithmetic_expression ::= arithmetic_expression minus_operator term 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Resta (-)"); 
                            String[] partesE1 = e1.toString().split("::");
                            String[] partesE2 = e2.toString().split("::");
                            String verificacion = verifiacionSemanticaAritmeticaBinaria("resta", partesE1[1], partesE2[1], partesE1[2], partesE2[2], partesE1[3], partesE2[3]);
       
                            RESULT = "ResultadoResta::" + verificacion + "::" + partesE1[2] + "::" + partesE1[3];
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // arithmetic_expression ::= arithmetic_expression minus_operator error 
            {
              Object RESULT =null;
		 System.err.println("Error:En la expresión aritmética después de -");  RESULT = "null::null::-1::-1";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // arithmetic_expression ::= term 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // term ::= term multiplication_operator power 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
        String[] partesE1 = e1.toString().split("::");
        String[] partesE2 = e2.toString().split("::");
        System.out.println("Multiplicacion (*)"); 
        String verificacion = verifiacionSemanticaAritmeticaBinaria("multiplicacion", partesE1[1], partesE2[1], partesE1[2], partesE2[2], partesE1[3], partesE2[3]);
       
        RESULT = "ResultadoMultiplicacion::" + verificacion + "::" + partesE1[2] + "::" + partesE1[3];
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // term ::= term division_operator power 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Division (/)"); 
        String[] partesE1 = e1.toString().split("::");
        String[] partesE2 = e2.toString().split("::");
        String verificacion = verifiacionSemanticaAritmeticaBinaria("division", partesE1[1], partesE2[1], partesE1[2], partesE2[2], partesE1[3], partesE2[3]);
       
        RESULT = "ResultadoDivision::" + verificacion + "::" + partesE1[2] + "::" + partesE1[3];
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // term ::= term int_division_operator power 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Division entera (//)");
        String[] partesE1 = e1.toString().split("::");
        String[] partesE2 = e2.toString().split("::");
        String verificacion = verifiacionSemanticaAritmeticaBinaria("division entera", partesE1[1], partesE2[1], partesE1[2], partesE2[2], partesE1[3], partesE2[3]);
       
        RESULT = "ResultadoDivisionEntera::" + verificacion + "::" + partesE1[2] + "::" + partesE1[3]);
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // term ::= term modulo_operator power 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Modulo (%)"); 
        String[] partesE1 = e1.toString().split("::");
        String[] partesE2 = e2.toString().split("::");
        String verificacion = verifiacionSemanticaAritmeticaBinaria("modulo", partesE1[1], partesE2[1], partesE1[2], partesE2[2], partesE1[3], partesE2[3]);
       
        RESULT = "ResultadoModulo::" + verificacion + "::" + partesE1[2] + "::" + partesE1[3];
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // term ::= power 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // power ::= factor power_operator power 
            {
              Object RESULT =null;
		 System.out.println("Potencia (^)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("power",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // power ::= factor 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("power",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // factor ::= left_parenthesis logical_expresion_and right_parenthesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Expresion entre parentesis reconocida"); RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // factor ::= arithmetic_operands 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // arithmetic_operands ::= int_literal 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n + "::int::" + nleft + "::" + nright;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operands",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // arithmetic_operands ::= float_literal 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n + "::float::" + nleft + "::" + nright; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operands",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // arithmetic_operands ::= identifier 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        //Verificar que exista el identificador
                        reportarErrorNoExisteSimbolo(n);
                        //Obtener el tipo
                        Simbolo simbolo = buscarSimbolo(n);
                        if(simbolo != null){
                            RESULT =  simbolo.getSimbolo() + "::" + simbolo.getTipo() + "::"  + nleft + "::" + nright; //valor::tipo::linea::columna
                        }else{
                            RESULT = "null::null::-1::-1";
                        }
                        
                       
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operands",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // arithmetic_operands ::= unary_negative 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operands",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // arithmetic_operands ::= postfix_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operands",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // arithmetic_operands ::= array_access 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operands",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // arithmetic_operands ::= function_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operands",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // arithmetic_operands ::= bool_literal 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n + "::bool::" + nleft + "::" + nright;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operands",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // arithmetic_operands ::= not_operator logical_expresion_and 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operands",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // logical_expresion_and ::= logical_expresion_and and_operator logical_expresion_or 
            {
              Object RESULT =null;
		 System.out.println("Operador logico AND (@)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expresion_and",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // logical_expresion_and ::= logical_expresion_or 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expresion_and",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // logical_expresion_or ::= logical_expresion_or or_operator relational_expression 
            {
              Object RESULT =null;
		 System.out.println("Operador logico OR (~)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expresion_or",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // logical_expresion_or ::= relational_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expresion_or",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // relational_expression ::= arithmetic_expression greater_operator arithmetic_expression 
            {
              Object RESULT =null;
		 System.out.println("Mayor que (>) reconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // relational_expression ::= arithmetic_expression less_operator arithmetic_expression 
            {
              Object RESULT =null;
		 System.out.println("Menor que (<) reconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // relational_expression ::= arithmetic_expression greater_equal_operator arithmetic_expression 
            {
              Object RESULT =null;
		 System.out.println("Mayor o igual que (>=) reconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // relational_expression ::= arithmetic_expression less_equal_operator arithmetic_expression 
            {
              Object RESULT =null;
		 System.out.println("Menor o igual que (<=) reconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // relational_expression ::= arithmetic_expression equal_operator arithmetic_expression 
            {
              Object RESULT =null;
		 System.out.println("Igual que (==) reconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // relational_expression ::= arithmetic_expression not_equal_operator arithmetic_expression 
            {
              Object RESULT =null;
		 System.out.println("Diferente que (!=) reconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // relational_expression ::= arithmetic_expression 
            {
              Object RESULT =null;
		 System.out.println("Expresión aritmética"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaration_values ::= logical_expresion_and 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_values",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaration_values ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_values",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declaration_values ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_values",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaration ::= let_keyword int_keyword identifier delimiter 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Declaracion: int sin valor con id "+ id); agregarSimbolo("int", id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaration ::= let_keyword float_keyword identifier delimiter 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Declaracion: float sin valor con id " + id); agregarSimbolo("float", id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaration ::= let_keyword bool_keyword identifier delimiter 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Declaracion: bool sin valor con id " + id); agregarSimbolo("bool", id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaration ::= let_keyword char_keyword identifier delimiter 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Declaracion: char sin valor con id " + id); agregarSimbolo("char", id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaration ::= let_keyword string_keyword identifier delimiter 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Declaracion: string sin valor con id "+ id); agregarSimbolo("string", id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaration ::= let_keyword int_keyword identifier assignment_operator declaration_values delimiter 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println("Declaracion: int con valor con el id "+ id); agregarSimbolo("int", id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaration ::= let_keyword float_keyword identifier assignment_operator declaration_values delimiter 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println("Declaracion: float con valor con el id "+ id); agregarSimbolo("float", id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declaration ::= let_keyword bool_keyword identifier assignment_operator declaration_values delimiter 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println("Declaracion: bool con valor con el id " + id); agregarSimbolo("bool", id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declaration ::= let_keyword char_keyword identifier assignment_operator declaration_values delimiter 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println("Declaracion: char con valor con el id " + id); agregarSimbolo("char", id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // declaration ::= let_keyword string_keyword identifier assignment_operator declaration_values delimiter 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println("Declaracion: string con valor con el id " + id); agregarSimbolo("string", id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // declaration ::= error delimiter 
            {
              Object RESULT =null;
		
               System.err.println("DECLARACION con error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // declaration ::= let_keyword error identifier delimiter 
            {
              Object RESULT =null;
		 System.err.println("No declaro el tipo error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declaration ::= let_keyword int_keyword error delimiter 
            {
              Object RESULT =null;
		 System.err.println("No declaro el id error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declaration ::= let_keyword float_keyword error delimiter 
            {
              Object RESULT =null;
		 System.err.println("No declaro el id error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declaration ::= let_keyword bool_keyword error delimiter 
            {
              Object RESULT =null;
		 System.err.println("No declaro el id error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declaration ::= let_keyword char_keyword error delimiter 
            {
              Object RESULT =null;
		 System.err.println("No declaro el id error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declaration ::= let_keyword string_keyword error delimiter 
            {
              Object RESULT =null;
		 System.err.println("No declaro el id error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declaration ::= let_keyword int_keyword identifier error 
            {
              Object RESULT =null;
		 System.err.println("Error falta el delimitador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declaration ::= let_keyword float_keyword identifier error 
            {
              Object RESULT =null;
		 System.err.println("Error falta el delimitador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // declaration ::= let_keyword bool_keyword identifier error 
            {
              Object RESULT =null;
		 System.err.println("Error falta el delimitador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // declaration ::= let_keyword int_keyword identifier assignment_operator declaration_values error 
            {
              Object RESULT =null;
		 System.err.println("Error falta el delimitador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // declaration ::= let_keyword float_keyword identifier assignment_operator declaration_values error 
            {
              Object RESULT =null;
		 System.err.println("Error falta el delimitador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // declaration ::= let_keyword bool_keyword identifier assignment_operator declaration_values error 
            {
              Object RESULT =null;
		 System.err.println("Error falta el delimitador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // declaration ::= let_keyword char_keyword identifier assignment_operator declaration_values error 
            {
              Object RESULT =null;
		 System.err.println("Error falta el delimitador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // declaration ::= let_keyword string_keyword identifier assignment_operator declaration_values error 
            {
              Object RESULT =null;
		 System.err.println("Error falta el delimitador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // declaration ::= let_keyword error identifier assignment_operator declaration_values delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error falta el tipo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // declaration ::= error int_keyword identifier delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error falta el let"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // declaration ::= error float_keyword identifier delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error falta el let"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // declaration ::= error bool_keyword identifier delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error falta el let"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // declaration ::= error char_keyword identifier delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error falta el let"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // declaration ::= error string_keyword identifier delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error falta el let"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // declaration ::= let_keyword int_keyword identifier assignment_operator error delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en inicializacion de int"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // declaration ::= let_keyword float_keyword identifier assignment_operator error delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en inicializacion de float"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // declaration ::= let_keyword bool_keyword identifier assignment_operator error delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en inicializacion de bool"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // declaration ::= let_keyword char_keyword identifier assignment_operator error delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en inicializacion de char"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // declaration ::= let_keyword string_keyword identifier assignment_operator error delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en inicializacion de string"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // reassignment ::= identifier assignment_operator declaration_values delimiter 
            {
              Object RESULT =null;
		 System.out.println("Reasignación"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reassignment",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // reassignment ::= identifier assignment_operator error delimiter 
            {
              Object RESULT =null;
		 System.err.println("Reasignación con error, declare un valor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reassignment",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // reassignment ::= error assignment_operator declaration_values delimiter 
            {
              Object RESULT =null;
		 System.err.println("Reasignación con error, declare un id"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reassignment",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // reassignment ::= identifier assignment_operator declaration_values error 
            {
              Object RESULT =null;
		 System.err.println("Reasignación con error, falta el delimitador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reassignment",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // array_declaration ::= let_keyword int_keyword identifier left_bracket int_literal right_bracket delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: array int sin nada"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // array_declaration ::= let_keyword int_keyword identifier error delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // array_declaration ::= error int_keyword identifier left_bracket int_literal right_bracket delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta let"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // array_declaration ::= let_keyword error identifier left_bracket int_literal right_bracket delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta tipo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // array_declaration ::= let_keyword int_keyword error left_bracket int_literal right_bracket delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta id"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // array_declaration ::= let_keyword int_keyword identifier left_bracket error right_bracket delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta tamaño"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // array_declaration ::= let_keyword int_keyword identifier left_bracket int_literal error delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta ]"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // array_declaration ::= let_keyword int_keyword identifier error int_literal right_bracket delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta ["); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // array_declaration ::= let_keyword int_keyword identifier left_bracket int_literal right_bracket error 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta delimitador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // array_declaration ::= let_keyword char_keyword identifier left_bracket int_literal right_bracket delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: array char sin nada"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // array_declaration ::= error char_keyword identifier left_bracket int_literal right_bracket delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta let"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // array_declaration ::= let_keyword char_keyword error left_bracket int_literal right_bracket delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta id"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // array_declaration ::= let_keyword char_keyword identifier left_bracket error right_bracket delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta tamaño"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // array_declaration ::= let_keyword char_keyword identifier left_bracket int_literal error delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta ]"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // array_declaration ::= let_keyword char_keyword identifier error int_literal right_bracket delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta ["); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // array_declaration ::= let_keyword char_keyword identifier left_bracket int_literal right_bracket error 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta delimitador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // array_declaration ::= let_keyword char_keyword identifier error delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // array_declaration ::= let_keyword int_keyword identifier left_bracket int_literal right_bracket assignment_operator left_block array_literals right_block delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: array int con valores"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // array_declaration ::= error int_keyword identifier left_bracket int_literal right_bracket assignment_operator left_block array_literals right_block delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta let"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // array_declaration ::= let_keyword error identifier left_bracket int_literal right_bracket assignment_operator left_block array_literals right_block delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta tipo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // array_declaration ::= let_keyword int_keyword error left_bracket int_literal right_bracket assignment_operator left_block array_literals right_block delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta id"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // array_declaration ::= let_keyword int_keyword identifier left_bracket error right_bracket assignment_operator left_block array_literals right_block delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta tamaño"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // array_declaration ::= let_keyword int_keyword identifier left_bracket int_literal error assignment_operator left_block array_literals right_block delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta ]"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // array_declaration ::= let_keyword int_keyword identifier error int_literal right_bracket assignment_operator left_block array_literals right_block delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta ["); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // array_declaration ::= let_keyword int_keyword identifier left_bracket int_literal right_bracket assignment_operator left_block array_literals right_block error 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta delimitador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // array_declaration ::= let_keyword int_keyword identifier left_bracket int_literal right_bracket assignment_operator left_block error right_block delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en inicializacion de array"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // array_declaration ::= let_keyword char_keyword identifier left_bracket int_literal right_bracket assignment_operator left_block array_literals right_block delimiter 
            {
              Object RESULT =null;
		 System.out.println("Declaracion: arreglo char con valores"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // array_declaration ::= error char_keyword identifier left_bracket int_literal right_bracket assignment_operator left_block array_literals right_block delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta let"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // array_declaration ::= let_keyword char_keyword error left_bracket int_literal right_bracket assignment_operator left_block array_literals right_block delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta id"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // array_declaration ::= let_keyword char_keyword identifier left_bracket error right_bracket assignment_operator left_block array_literals right_block delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta tamaño"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // array_declaration ::= let_keyword char_keyword identifier left_bracket int_literal error assignment_operator left_block array_literals right_block delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta ]"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // array_declaration ::= let_keyword char_keyword identifier error int_literal right_bracket assignment_operator left_block array_literals right_block delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en declaracion de array, falta ["); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // array_declaration ::= let_keyword char_keyword identifier left_bracket int_literal right_bracket assignment_operator left_block error right_block delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en inicializacion de array"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // array_literals ::= int_literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_literals",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // array_literals ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_literals",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // array_literals ::= identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_literals",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // array_literals ::= array_literals comma_keyword int_literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_literals",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // array_literals ::= array_literals comma_keyword CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_literals",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // array_literals ::= array_literals comma_keyword identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_literals",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // assign_elements_array ::= identifier left_bracket arithmetic_expression right_bracket assignment_operator arithmetic_expression delimiter 
            {
              Object RESULT =null;
		 System.out.println("Asignacion a elemento de arreglo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_elements_array",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // assign_elements_array ::= identifier left_bracket arithmetic_expression right_bracket assignment_operator CHAR_LITERAL delimiter 
            {
              Object RESULT =null;
		 System.out.println("Asignacion a elemento de arreglo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_elements_array",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // array_access ::= identifier left_bracket arithmetic_expression right_bracket 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_access",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // input_statement ::= input_keyword identifier delimiter 
            {
              Object RESULT =null;
		 System.out.println("Input reconocido"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // input_statement ::= input_keyword error delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en input"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // input_statement ::= error input_keyword identifier delimiter 
            {
              Object RESULT =null;
		 System.err.println("No se declaro el input"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // input_statement ::= input_keyword identifier error 
            {
              Object RESULT =null;
		 System.err.println("Error falta el delimitador en input"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // output_statement ::= output_keyword identifier delimiter 
            {
              Object RESULT =null;
		 System.out.println("Output id"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // output_statement ::= output_keyword int_literal delimiter 
            {
              Object RESULT =null;
		 System.out.println("Output entero"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // output_statement ::= output_keyword float_literal delimiter 
            {
              Object RESULT =null;
		 System.out.println("Output float"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // output_statement ::= output_keyword bool_literal delimiter 
            {
              Object RESULT =null;
		 System.out.println("Output booleano"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // output_statement ::= output_keyword CHAR_LITERAL delimiter 
            {
              Object RESULT =null;
		 System.out.println("Output char"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // output_statement ::= output_keyword STRING_LITERAL delimiter 
            {
              Object RESULT =null;
		 System.out.println("Output string"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // output_statement ::= output_keyword error delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en output"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // decide_of_left ::= decide_keyword of_keyword left_parenthesis logical_expresion_and right_parenthesis minus_operator greater_operator 
            {
              Object RESULT =null;
		 
                        //Crear la tabla de símbolos
                        TablaDeSimbolos t = crearTablaDeSimbolos("decide of"); //Crear la nueva tabla para el decide of
                        apilarNuevaTablaDeSimbolos(t); //Se coloca esta tabla como la actual y la que estaba en esa variable como la anterior de esta
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decide_of_left",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // decide_of_left_and_content ::= decide_of_left left_block loop_content right_block 
            {
              Object RESULT =null;
		 
                                    desapilarTablaDeSimbolos(); //Desapilo aquí que ya se habría analizado ese bloque
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decide_of_left_and_content",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // decide_of ::= decide_of_left_and_content end_keyword decide_keyword delimiter 
            {
              Object RESULT =null;
		 System.out.println("decide of normal");  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decide_of",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // decide_of ::= decide_of_left_and_content elif_list end_keyword decide_keyword delimiter 
            {
              Object RESULT =null;
		 System.out.println("decide of con varias condiciones"); ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decide_of",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // decide_of ::= decide_of_left_and_content else_part end_keyword decide_keyword delimiter 
            {
              Object RESULT =null;
		 System.out.println("decide of con else"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decide_of",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // decide_of ::= decide_of_left_and_content elif_list else_part end_keyword decide_keyword delimiter 
            {
              Object RESULT =null;
		 System.out.println("decide of con varias condiciones y else"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decide_of",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // decide_of ::= decide_keyword of_keyword left_parenthesis error right_parenthesis minus_operator greater_operator left_block loop_content right_block end_keyword decide_keyword delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en condicion de decide of"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decide_of",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // elif_list ::= elif_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_list",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // elif_list ::= elif_list elif_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_list",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // elif_part_left ::= left_parenthesis logical_expresion_and right_parenthesis minus_operator greater_operator 
            {
              Object RESULT =null;
		
                        //Crear la tabla de símbolos
                        TablaDeSimbolos t = crearTablaDeSimbolos("elif"); //Crear la nueva tabla para el decide of
                        apilarNuevaTablaDeSimbolos(t); //Se coloca esta tabla como la actual y la que estaba en esa variable como la anterior de esta
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_part_left",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // elif_part ::= elif_part_left left_block loop_content right_block 
            {
              Object RESULT =null;
		 System.out.println("elif"); 
                desapilarTablaDeSimbolos();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif_part",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // else_part_left ::= else_keyword minus_operator greater_operator 
            {
              Object RESULT =null;
		
                        //Crear la tabla de símbolos
                        TablaDeSimbolos t = crearTablaDeSimbolos("else"); //Crear la nueva tabla para el decide of
                        apilarNuevaTablaDeSimbolos(t); //Se coloca esta tabla como la actual y la que estaba en esa variable como la anterior de esta
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_part_left",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // else_part ::= else_part_left left_block loop_content right_block 
            {
              Object RESULT =null;
		 System.out.println("else"); desapilarTablaDeSimbolos();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_part",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // loop_left ::= loop_keyword 
            {
              Object RESULT =null;
		 
             //Crear la tabla de símbolos
                TablaDeSimbolos t = crearTablaDeSimbolos("loop"); 
                apilarNuevaTablaDeSimbolos(t); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_left",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // loop ::= loop_left loop_content exit_keyword when_keyword logical_expresion_and delimiter end_keyword loop_keyword delimiter 
            {
              Object RESULT =null;
		 System.out.println("Loop");  desapilarTablaDeSimbolos();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // loop ::= loop_left error exit_keyword when_keyword loop_keyword delimiter 
            {
              Object RESULT =null;
		 System.err.println("Error en contenido de loop");  desapilarTablaDeSimbolos();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // loop_content ::= statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_content",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // loop_content ::= break_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_content",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // loop_content ::= loop_content statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_content",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // loop_content ::= loop_content break_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_content",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // break_statement ::= break_keyword delimiter 
            {
              Object RESULT =null;
		 System.out.println("break"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("break_statement",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // for_loop_left ::= for_keyword reassignment step_keyword int_literal to_keyword int_literal do_keyword 
            {
              Object RESULT =null;
		 System.out.println("for loop int to"); 
            //Crear la tabla de símbolos
            TablaDeSimbolos t = crearTablaDeSimbolos("for"); 
            apilarNuevaTablaDeSimbolos(t); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_loop_left",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // for_loop_left ::= for_keyword reassignment step_keyword int_literal downto_keyword int_literal do_keyword 
            {
              Object RESULT =null;
		 System.out.println("for loop int downto"); 
            //Crear la tabla de símbolos
            TablaDeSimbolos t = crearTablaDeSimbolos("for"); 
            apilarNuevaTablaDeSimbolos(t); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_loop_left",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // for_loop_left ::= for_keyword reassignment step_keyword float_literal to_keyword float_literal do_keyword 
            {
              Object RESULT =null;
		 System.out.println("for loop float to"); 
            //Crear la tabla de símbolos
                TablaDeSimbolos t = crearTablaDeSimbolos("for"); 
                apilarNuevaTablaDeSimbolos(t); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_loop_left",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // for_loop_left ::= for_keyword reassignment step_keyword float_literal downto_keyword float_literal do_keyword 
            {
              Object RESULT =null;
		 System.out.println("for loop float downto"); 
            //Crear la tabla de símbolos
                TablaDeSimbolos t = crearTablaDeSimbolos("for"); 
                apilarNuevaTablaDeSimbolos(t); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_loop_left",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // for_loop ::= for_loop_left left_block loop_content right_block 
            {
              Object RESULT =null;
		 System.out.println("fin for"); desapilarTablaDeSimbolos();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_loop",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // function_left ::= int_keyword identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    System.out.println("Crear tabla de símbolos para función int: " +id); 
                    TablaDeSimbolos t = crearTablaDeSimbolos(id); //Crear la nueva tabla
                    apilarNuevaTablaDeSimbolos(t); //Se coloca esta tabla como la actual y la que estaba en esa variable como la anterior de esta
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_left",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // function_left ::= float_keyword identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Crear tabla de símbolos para función flotante: " +id); 
                    TablaDeSimbolos t = crearTablaDeSimbolos(id); //Crear la nueva tabla
                    apilarNuevaTablaDeSimbolos(t); //Se coloca esta tabla como la actual y la que estaba en esa variable como la anterior de esta
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_left",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // function_left ::= bool_keyword identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Crear tabla de símbolos para función bool: " +id); 
                    TablaDeSimbolos t = crearTablaDeSimbolos(id); //Crear la nueva tabla
                    apilarNuevaTablaDeSimbolos(t); //Se coloca esta tabla como la actual y la que estaba en esa variable como la anterior de esta
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_left",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // function_left ::= char_keyword identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Crear tabla de símbolos para función char: " +id); 
                    TablaDeSimbolos t = crearTablaDeSimbolos(id); //Crear la nueva tabla
                    apilarNuevaTablaDeSimbolos(t); //Se coloca esta tabla como la actual y la que estaba en esa variable como la anterior de esta
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_left",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // function_left ::= string_keyword identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Crear tabla de símbolos para función string: " +id); 
                    TablaDeSimbolos t = crearTablaDeSimbolos(id); //Crear la nueva tabla
                    apilarNuevaTablaDeSimbolos(t); //Se coloca esta tabla como la actual y la que estaba en esa variable como la anterior de esta
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_left",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // function ::= function_left left_parenthesis right_parenthesis block 
            {
              Object RESULT =null;
		 
                //Aquí desapilo
                desapilarTablaDeSimbolos();
                
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // function ::= function_left left_parenthesis params right_parenthesis block 
            {
              Object RESULT =null;
		 
                desapilarTablaDeSimbolos();
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // function ::= function_left left_parenthesis error right_parenthesis block 
            {
              Object RESULT =null;
		 System.err.println("ERROR en parámetros de función "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // params ::= param params_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // params_tail ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params_tail",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // params_tail ::= comma_keyword param params_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("params_tail",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // param ::= int_keyword identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 agregarSimbolo("int", id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // param ::= float_keyword identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 agregarSimbolo("float", id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // param ::= bool_keyword identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 agregarSimbolo("bool", id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // param ::= char_keyword identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 agregarSimbolo("char", id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // param ::= string_keyword identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 agregarSimbolo("int", id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // return_statement ::= return_keyword delimiter 
            {
              Object RESULT =null;
		 System.out.println("return vacio"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // return_statement ::= return_keyword logical_expresion_and delimiter 
            {
              Object RESULT =null;
		 System.out.println("return expresion logica"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // function_call ::= identifier left_parenthesis right_parenthesis 
            {
              Object RESULT =null;
		 System.out.println("Llamada a funcion sin argumentos"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // function_call ::= identifier left_parenthesis args right_parenthesis 
            {
              Object RESULT =null;
		 System.out.println("Llamada a funcion con argumentos"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // args ::= int_literal args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // args ::= float_literal args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // args ::= identifier args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // args ::= array_access args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // args ::= STRING_LITERAL args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // args ::= CHAR_LITERAL args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // args_tail ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_tail",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // args_tail ::= comma_keyword int_literal args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_tail",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // args_tail ::= comma_keyword float_literal args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_tail",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // args_tail ::= comma_keyword identifier args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_tail",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // args_tail ::= comma_keyword array_access args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_tail",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // args_tail ::= comma_keyword STRING_LITERAL args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_tail",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // args_tail ::= comma_keyword CHAR_LITERAL args_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_tail",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // block ::= left_block statements right_block 
            {
              Object RESULT =null;
		 System.out.println("bloque con statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // block ::= left_block right_block 
            {
              Object RESULT =null;
		 System.out.println("bloque vacio"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // block ::= left_block error right_block 
            {
              Object RESULT =null;
		 System.err.println("bloque con error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // statements ::= statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // statement ::= declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // statement ::= reassignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // statement ::= array_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // statement ::= assign_elements_array 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // statement ::= input_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // statement ::= output_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // statement ::= decide_of 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // statement ::= loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // statement ::= for_loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // statement ::= return_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // global_variables ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_variables",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // global_variables ::= global_variables declaration 
            {
              Object RESULT =null;
		 hola(); //Puedo hacer que si no hay tabla ya creada la haga. Sino no hace nada  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_variables",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // principal_left ::= void_keyword principal_keyword left_parenthesis right_parenthesis 
            {
              Object RESULT =null;
		 //Para poder crear la tabla de símbolos
                        TablaDeSimbolos t = crearTablaDeSimbolos("Principal"); //Crear la nueva tabla
                        apilarNuevaTablaDeSimbolos(t); //Se coloca esta tabla como la actual y la que estaba en esa variable como la anterior de esta
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principal_left",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // principal ::= principal_left block 
            {
              Object RESULT =null;
		 System.out.println("\n>> FUNCION PRINCIPAL reconocida"); desapilarTablaDeSimbolos(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principal",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // functions ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // functions ::= functions function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // program ::= global_variables functions principal 
            {
              Object RESULT =null;
		 System.out.println("\n========== PROGRAMA COMPLETO VALIDADO ==========\n"); 
         parser.sePuedeoNo();
         System.out.println("\nEsto está al final de la producción program");
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
